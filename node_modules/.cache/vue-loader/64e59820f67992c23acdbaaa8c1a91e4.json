{"remainingRequest":"/home/runner/work/CF1_232100/CF1_232100/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/CF1_232100/CF1_232100/src/views/Tema3.vue?vue&type=template&id=00be8926&lang=pug","dependencies":[{"path":"/home/runner/work/CF1_232100/CF1_232100/src/views/Tema3.vue","mtime":1733960538912},{"path":"/home/runner/work/CF1_232100/CF1_232100/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF1_232100/CF1_232100/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF1_232100/CF1_232100/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/CF1_232100/CF1_232100/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/CF1_232100/CF1_232100/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/CF1_232100/CF1_232100/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF1_232100/CF1_232100/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubwogIC5jb250YWluZXIudGFyamV0YS50YXJqZXRhLS1ibGFuY2EucC00LnAtbWQtNS5tYi01CiAgICAudGl0dWxvLXByaW5jaXBhbC5jb2xvci1hY2VudG8tY29udGVuaWRvKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgLnRpdHVsby1wcmluY2lwYWxfX251bWVybwogICAgICAgIHNwYW4gMwogICAgICBoMSBEaWJ1am8gVMOpY25pY28KICAgIAogICAgLnJvdwogICAgICAuY29sLWxnKGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikKICAgICAgICBwIEVsIGRpYnVqbyB0w6ljbmljbyBlcyB1bmEgZGlzY2lwbGluYSBlc2VuY2lhbCBxdWUgc2UgZW5jdWVudHJhIGVuIGxhIGludGVyc2VjY2nDs24gZGVsIGFydGUgeSBsYSBpbmdlbmllcsOtYSwgZG9uZGUgbGEgcHJlY2lzacOzbiB5IGxhIGNyZWF0aXZpZGFkIHNlIHVuZW4gcGFyYSByZXByZXNlbnRhciBpZGVhcywgZGlzZcOxb3MgeSBzb2x1Y2lvbmVzIGRlIG1hbmVyYSBjbGFyYSB5IGRldGFsbGFkYS4gRG9taW5hciBlc3RhIGhhYmlsaWRhZCBlcyBmdW5kYW1lbnRhbCBwYXJhIGFxdWVsbG9zIHF1ZSBidXNjYW4gY2FycmVyYXMgZW4gY2FtcG9zIGNvbW8gbGEgYXJxdWl0ZWN0dXJhLCBsYSBpbmdlbmllcsOtYSwgbGEgZmFicmljYWNpw7NuIHkgbXVjaGFzIG90cmFzIGRpc2NpcGxpbmFzIHTDqWNuaWNhcy4gCiAgICAgICAgLnAtNChzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjojOThFMkVDO2JvcmRlci1yYWRpdXM6OXB4OyIpCiAgICAgICAgICBwLm1iLTAgQW50ZXMgZGUgZW1iYXJjYXJub3MgZW4gbGEgZXhwbG9yYWNpw7NuIGRlIGxvcyBwcmluY2lwaW9zIHkgdMOpY25pY2FzIGRlbCBkaWJ1am8gdMOpY25pY28gYXNvY2lhZG8gYSBsYXMgbGFib3JlcyBhZ3LDrWNvbGFzLCBwZWN1YXJpYXMgbyBhZ3JvaW5kdXN0cmlhbGVzLCBlcyBpbXBvcnRhbnRlIHJlYWxpemFyIHVuYSBhZGVjdWFkYSBjb250ZXh0dWFsaXphY2nDs24geSB1bmEgaWRlbnRpZmljYWNpw7NuIGRlIGxvcyBjb25vY2ltaWVudG9zIG5lY2VzYXJpb3MgcGFyYSBlbCBhcHJlbmRpemFqZS4gRW4gZXN0YSBzZWNjacOzbiBpbmljaWFsIGRlIG51ZXN0cmEgZ3XDrWEsIGVzdGFibGVjZXJlbW9zIGVsIGVzY2VuYXJpbyB5IHNlbnRhcmVtb3MgbGFzIGJhc2VzIHBhcmEgdW4gYXByZW5kaXphamUgZWZlY3Rpdm8geSBzaWduaWZpY2F0aXZvLgogICAgICAuY29sLWxnLWF1dG8uZC1ub25lLmQtbGctYmxvY2soZGF0YS1hb3M9ImZhZGUtbGVmdCIpCiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMy8xLnBuZyIpCiAgICAKICAgIC5jb250XzFfMi5tdC01CiAgICAgIC5yb3cKICAgICAgICAuY29sLWxnLWF1dG8uZC1ub25lLmQtbGctYmxvY2soZGF0YS1hb3M9ImZhZGUtcmlnaHQiKQogICAgICAgICAgZmlndXJlCiAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzLzIucG5nIikKICAgICAgICAuY29sLWxnKGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgICAgcCBFbCBkaWJ1am8gdMOpY25pY28gZXMgdW4gbGVuZ3VhamUgdW5pdmVyc2FsIHF1ZSB0cmFzY2llbmRlIGxhcyBiYXJyZXJhcyBkZWwgaWRpb21hIHkgY29uZWN0YSBhIHByb2Zlc2lvbmFsZXMgZGUgZGl2ZXJzYXMgZGlzY2lwbGluYXMgZW4gbGEgY29tdW5pY2FjacOzbiBkZSBpZGVhcywgZGlzZcOxb3MgeSBwcm95ZWN0b3MuIEVzIHVuIG1lZGlvIHBhcmEgcGxhc21hciBpZGVhcyBlbiBlbCBwYXBlbCwgdW5hIGhlcnJhbWllbnRhIGZ1bmRhbWVudGFsIGVuIGxhIHRvbWEgZGUgZGVjaXNpb25lcyB5IGxhIHJlc29sdWNpw7NuIGRlIHByb2JsZW1hcyBlbiBjYW1wb3MgdGFuIGRpdmVyc29zIGNvbW8gbGEgaW5nZW5pZXLDrWEsIGxhIGFycXVpdGVjdHVyYSwgbGEgZmFicmljYWNpw7NuLCBsYSBjb25zdHJ1Y2Npw7NuIGxhIGFncmljdWx0dXJhIGVuIG11Y2hhcyBvdHJhcyBsYWJvcmVzLiBFc3RlIGFwYXJ0YWRvIHByZXRlbmRlIGRhciB1bmEgYmFzZSBlbiBsb3MgcHJpbmNpcGlvcyBlc2VuY2lhbGVzIGRlbCBkaWJ1am8gdMOpY25pY28sIHF1ZSBwZXJtaXRpcsOhbiBhIGxvcyBhcHJlbmRpY2VzIHRyYWR1Y2lyIGNvbmNlcHRvcyBhYnN0cmFjdG9zIGVuIHJlcHJlc2VudGFjaW9uZXMgdmlzdWFsZXMgY2xhcmFzIHkgcHJlY2lzYXMuIGRlc2RlIGxhIGNyZWFjacOzbiBkZSBkaWJ1am9zIGJpZGltZW5zaW9uYWxlcyBzaW1wbGVzIGhhc3RhIGxhIGNvbXByZW5zacOzbiBkZSBwbGFub3MgdHJpZGltZW5zaW9uYWxlcyBjb21wbGVqb3MgY29uY2VwdG9zIGLDoXNpY29zLCBjb21vIGxhcyBwcm95ZWNjaW9uZXMgb3J0b2dvbmFsZXMsIGxhIHNpbWV0csOtYSwgbGEgZXNjYWxhIHkgbGEgcmVwcmVzZW50YWNpw7NuIGRlIG9iamV0b3MgZW4gZGlmZXJlbnRlcyB2aXN0YXMuIEFkZW3DoXMsIHNlIGV4cGxvcmFyw6EgZW4gZWwgdXNvIGRlIGhlcnJhbWllbnRhcyB5IHNvZnR3YXJlIGRlIGRpYnVqbyBhc2lzdGlkbyBwb3IgY29tcHV0YWRvcmEgKENBRCkgcXVlIGhhbiByZXZvbHVjaW9uYWRvIGxhIGZvcm1hIGVuIHF1ZSBzZSBjcmVhIHkgc2UgY29tcGFydGUgZWwgZGlidWpvIHTDqWNuaWNvIGVuIGxhIGVyYSBkaWdpdGFsLiAKICAgICAgICAgIGEuYW5leG8ubXQtNC5tYi1sZy0wLm1zLTAuYmctd2hpdGUoaHJlZj0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1ZUzVjSHBXTE5FRSIgdGFyZ2V0PSJfYmxhbmsiIHN0eWxlPSJtYXgtd2lkdGg6Zml0LWNvbnRlbnQ7IikKICAgICAgICAgICAgLmFuZXhvX19pY29ubwogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL3RlbXBsYXRlL2ljb25vLWxpbmsuc3ZnIikKICAgICAgICAgICAgLmFuZXhvX190ZXh0bwogICAgICAgICAgICAgIHAuZnctbm9ybWFsICNbc3Ryb25nIEVubGFjZSB3ZWIuXSBWaWRlbyBpbnRyb2R1Y2Npw7NuLSBTZSByZWNvbWllbmRhIG9ic2VydmFyIGVsIHNpZ3VpZW50ZSB2w61kZW86IE3DoXF1aW5hcyBBZ3LDrWNvbGFzOiBkaXNlw7FvIGluZHVzdHJpYWwgKFBhcnRlIDEgZGUgMikuCiAgICAKICAgICAgU2VwYXJhZG9yCgogICAgICAudGl0dWxvLXNlZ3VuZG8oZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICAgIGgyI3RfM18xIDMuMQkgRGlidWpvIGFydMOtc3RpY28gVnMuIERpYnVqbyB0w6ljbmljbwogICAgICAKICAgICAgcChkYXRhLWFvcz0iZmFkZS1yaWdodCIpIEVzIGZ1bmRhbWVudGFsIGVudGVuZGVyIGxhcyBkaWZlcmVuY2lhcyBlbnRyZSBlbCAjW3N0cm9uZyBkaWJ1am8gYXJ0w61zdGljb10geSBlbCAjW3N0cm9uZyBkaWJ1am8gdMOpY25pY29dLCB5YSBxdWUgYW1ib3Mgc29uIGZvcm1hcyBkZSBleHByZXNpw7NuIGdyw6FmaWNhLCBwZXJvIGNvbiBvYmpldGl2b3MgeSBlbmZvcXVlcyBkaXN0aW50b3MuCgogICAgICAucm93Lm10LTQuanVzdGlmeS1jb250ZW50LWNlbnRlcgogICAgICAgIC5jb2wtbGcubWItNC5tYi1sZy0wLmNvbC1tZC05KGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgICAgIC5iZy13aGl0ZS5oLTEwMChzdHlsZT0iYm94LXNoYWRvdzowcHggNHB4IDIwcHggcmdiYSgwLDAsMCwuMSk7Ym9yZGVyLXJhZGl1czoxNHB4OyIpCiAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzLzMucG5nIikKICAgICAgICAgICAgLnAtNAogICAgICAgICAgICAgIGg1IERpYnVqbyBhcnTDrXN0aWNvCiAgICAgICAgICAgICAgcCBTZSB1dGlsaXphIGNvbW8gbWVkaW8gZGUgZXhwcmVzacOzbiBwZXJzb25hbCB5IGNyZWF0aXZhLiBTdSBlbmZvcXVlIHByaW5jaXBhbCBlcyBlc3TDqXRpY28sIHkgc3VlbGUgZXN0YXIgY2FyZ2FkbyBkZSBzdWJqZXRpdmlkYWQsIHB1ZXMgZGVwZW5kZSBkZSBsYSBwZXJjZXBjacOzbiB5IGVzdGlsbyBkZWwgYXJ0aXN0YS4gTm8gc2lndWUgbm9ybWFzIGVzdHJpY3RhczsgZWwgYXJ0aXN0YSB0aWVuZSBsaWJlcnRhZCBwYXJhIGV4cGVyaW1lbnRhciBjb24gZm9ybWFzLCBwcm9wb3JjaW9uZXMsIHRleHR1cmFzIHkgY29sb3Jlcy4gTm8gYnVzY2EgcHJlY2lzacOzbiwgc2lubyB0cmFuc21pdGlyIGVtb2Npb25lcywgaWRlYXMgbyBjb25jZXB0b3MgYWJzdHJhY3Rvcy4KICAgICAgICAgICAgICBwICNbc3Ryb25nIEVqZW1wbG9zIGRlIGFwbGljYWNpw7NuOl0gYXJ0ZXMgcGzDoXN0aWNhcywgZGlzZcOxbyBncsOhZmljbywgaWx1c3RyYWNpw7NuLCB5IGFydGVzIHZpc3VhbGVzIGVuIGdlbmVyYWwuCiAgICAgICAgLmNvbC1sZy5jb2wtbWQtOShkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgICAuYmctd2hpdGUuaC0xMDAoc3R5bGU9ImJveC1zaGFkb3c6MHB4IDRweCAyMHB4IHJnYmEoMCwwLDAsLjEpO2JvcmRlci1yYWRpdXM6MTRweDsiKQogICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMy80LnBuZyIpCiAgICAgICAgICAgIC5wLTQKICAgICAgICAgICAgICBoNSBEaWJ1am8gdMOpY25pY28KICAgICAgICAgICAgICBwIFRpZW5lIGVsIG9iamV0aXZvIGRlIGNvbXVuaWNhciBpbmZvcm1hY2nDs24gcHJlY2lzYSBzb2JyZSB1biBvYmpldG8gbyBzaXN0ZW1hLiBTdSBmdW5jacOzbiBlcyBmYWNpbGl0YXIgbGEgY29tcHJlbnNpw7NuIGRlIGxhcyBjYXJhY3RlcsOtc3RpY2FzIGbDrXNpY2FzIHkgZGltZW5zaW9uYWxlcyBkZSB1biBvYmpldG8gcGFyYSBzdSBmYWJyaWNhY2nDs24sIGVuc2FtYmxhamUgbyBtYW50ZW5pbWllbnRvLiBBc8OtIG1pc21vLCBTaWd1ZSBub3JtYXMgeSBlc3TDoW5kYXJlcyBxdWUgYXNlZ3VyYW4gdW5pZm9ybWlkYWQgeSBjbGFyaWRhZC4gU2UgZW5mb2NhIGVuIGxhIHByZWNpc2nDs24sIHV0aWxpemFuZG8gcHJveWVjY2lvbmVzLCBlc2NhbGFzIHkgYWNvdGFjaW9uZXMgcGFyYSByZXByZXNlbnRhciBlbCBvYmpldG8gZGUgbWFuZXJhIG9iamV0aXZhLgogICAgICAgICAgICAgIHAgI1tzdHJvbmcgRWplbXBsb3MgZGUgYXBsaWNhY2nDs246XSBwbGFub3MgZGUgaW5nZW5pZXLDrWEsIGRpc2XDsW8gbWVjw6FuaWNvLCBhcnF1aXRlY3R1cmEsIHNpc3RlbWFzIGVsw6ljdHJpY29zLCB5IHBsYW5vcyBpbmR1c3RyaWFsZXMuCiAgICAgIAogICAgICAuY29udF9kZWNvcmF0aXZvLm1iLTQubXQtNShkYXRhLWFvcz0iZmFkZS1yaWdodCIpCiAgICAgICAgLnJvdwogICAgICAgICAgLmNvbC1hdXRvLnBlLTAKICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvMy5zdmciKQogICAgICAgICAgLmNvbC5wcy0yKHN0eWxlPSJwbGFjZS1zZWxmOmNlbnRlcjsiKQogICAgICAgICAgICBoMy5tYi0wLnBlLTQgSW1wb3J0YW5jaWEgZGVsIGRpYnVqbyB0w6ljbmljbyBlbiBsYSBpbmR1c3RyaWEKICAgICAgCiAgICAgIHAoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKSBFbCBkaWJ1am8gdMOpY25pY28gZXMgZXNlbmNpYWwgZW4gbcO6bHRpcGxlcyBjYW1wb3MgZGUgbGEgaW5kdXN0cmlhLCBjb21vIGxhIGluZ2VuaWVyw61hIG1lY8OhbmljYSwgbGEgYXJxdWl0ZWN0dXJhLCBsYSBjb25zdHJ1Y2Npw7NuLCB5IGxhIG1hbnVmYWN0dXJhLiBTdSBpbXBvcnRhbmNpYSByYWRpY2EgZW4gcXVlIGFjdMO6YSBjb21vIHVuIGxlbmd1YWplIHVuaXZlcnNhbCwgcXVlIHBlcm1pdGUgYSBwcm9mZXNpb25hbGVzIGRlIGRpZmVyZW50ZXMgw6FyZWFzIGVudGVuZGVyLCB2aXN1YWxpemFyIHkgY29uc3RydWlyIGxvcyBtaXNtb3Mgb2JqZXRvcyBvIGVzdHJ1Y3R1cmFzIHNpbiBtYXJnZW4gZGUgZXJyb3IuCgogICAgICAucm93Lm10LTQKICAgICAgICAuY29sLWxnLWF1dG8uZC1ub25lLmQtbGctYmxvY2soZGF0YS1hb3M9ImZhZGUtcmlnaHQiKQogICAgICAgICAgZmlndXJlCiAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzLzUucG5nIikKICAgICAgICAuY29sLWxnKGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgICAgQWNvcmRpb25SRUQodGlwbz0iYSIgY2xhc2UtdGFyamV0YT0idGFyamV0YSIpCiAgICAgICAgICAgIC5yb3cuY29sLXhsLTExLm0tYXV0byh0aXR1bG89IkNvbXVuaWNhY2nDs24gRWZpY2llbnRlIikKICAgICAgICAgICAgICBwIExvcyBwbGFub3MgeSBkaWJ1am9zIHTDqWNuaWNvcyBzb24gdW4gbWVkaW8gZGUgY29tdW5pY2FjacOzbiBwcmVjaXNhIGVudHJlIGRpc2XDsWFkb3JlcywgaW5nZW5pZXJvcywgb3BlcmFyaW9zLCB5IHTDqWNuaWNvcy4gUGVybWl0ZW4gcXVlIHRvZG9zIGNvbXByZW5kYW4gbGFzIGVzcGVjaWZpY2FjaW9uZXMgZGUgdW4gcHJveWVjdG8gZGUgbWFuZXJhIHVuaWZvcm1lLCBhc2VndXJhbmRvIHF1ZSBlbCBwcm9kdWN0byBmaW5hbCBjdW1wbGEgY29uIGxvcyByZXF1aXNpdG9zIGRlc2VhZG9zLgogICAgICAgICAgICAucm93LmNvbC14bC0xMS5tLWF1dG8odGl0dWxvPSJFbGltaW5hY2nDs24gZGUgQW1iaWfDvGVkYWRlcyIpCiAgICAgICAgICAgICAgcCBBbCBlc3RhciBub3JtYWxpemFkbywgZWwgZGlidWpvIHTDqWNuaWNvIG1pbmltaXphIGxhcyBpbnRlcnByZXRhY2lvbmVzIHN1YmpldGl2YXMuIExvcyBkZXRhbGxlcyBjb21vIGRpbWVuc2lvbmVzLCBtYXRlcmlhbGVzIHkgdG9sZXJhbmNpYXMgc2UgcmVwcmVzZW50YW4gY29uIGV4YWN0aXR1ZCwgbG8gY3VhbCByZWR1Y2UgZWwgcmllc2dvIGRlIGVycm9yZXMgZW4gbGEgZmFicmljYWNpw7NuIG8gY29uc3RydWNjacOzbi4KICAgICAgICAgICAgLnJvdy5jb2wteGwtMTEubS1hdXRvKHRpdHVsbz0iT3B0aW1pemFjacOzbiBkZSBQcm9jZXNvcyIpCiAgICAgICAgICAgICAgcCBFbiBlbCDDoW1iaXRvIGRlIGxhIG1hbnVmYWN0dXJhLCBlbCBkaWJ1am8gdMOpY25pY28gZmFjaWxpdGEgZWwgcHJvY2VzbyBkZSBwcm9kdWNjacOzbiwgeWEgcXVlIHByb3BvcmNpb25hIHRvZGEgbGEgaW5mb3JtYWNpw7NuIG5lY2VzYXJpYSBwYXJhIGVuc2FtYmxhciwgbWVjYW5pemFyLCBvIGNvbnN0cnVpciBjYWRhIHBpZXphLiBFc3RvIGF1bWVudGEgbGEgZWZpY2llbmNpYSB5IHBlcm1pdGUgcXVlIGxvcyBwcm9kdWN0b3Mgc2VhbiBmYWJyaWNhZG9zIGEgZXNjYWxhIGNvbiB1biBhbHRvIG5pdmVsIGRlIHByZWNpc2nDs24uCiAgICAgICAgICAgIC5yb3cuY29sLXhsLTExLm0tYXV0byh0aXR1bG89IkFzZWd1cmFtaWVudG8gZGUgQ2FsaWRhZCIpCiAgICAgICAgICAgICAgcCBBbCBkZWZpbmlyIGNsYXJhbWVudGUgbGFzIGVzcGVjaWZpY2FjaW9uZXMgZGUgZGlzZcOxbywgZWwgZGlidWpvIHTDqWNuaWNvIHBlcm1pdGUgdmVyaWZpY2FyIHF1ZSBsb3MgcHJvZHVjdG9zIGN1bXBsZW4gY29uIGxvcyBlc3TDoW5kYXJlcyBkZSBjYWxpZGFkIHJlcXVlcmlkb3MuIExvcyB0w6ljbmljb3MgcHVlZGVuIHJlYWxpemFyIGNvbnRyb2xlcyBkZSBjYWxpZGFkIGJhc2Fkb3MgZW4gbGFzIGRpbWVuc2lvbmVzIHkgdG9sZXJhbmNpYXMgaW5kaWNhZGFzIGVuIGxvcyBwbGFub3MuCgogICAgcC5tdC01KGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikgRW4gZWwgY29udGV4dG8gZGUgdW4gcHJveWVjdG8sIGVsIGRpYnVqbyB0w6ljbmljbyBzZSBjb252aWVydGUgZW4gdW4gZG9jdW1lbnRvIGRlIHJlZmVyZW5jaWEgcXVlIGd1w61hIHRvZG8gZWwgcHJvY2VzbywgZGVzZGUgbGEgZmFzZSBkZSBkaXNlw7FvIGhhc3RhIGxhIHByb2R1Y2Npw7NuIHkgZWwgbWFudGVuaW1pZW50by4KCiAgICAuY29udF9kZWNvcmF0aXZvLm1iLTQubXQtNShkYXRhLWFvcz0iZmFkZS1yaWdodCIpCiAgICAgIC5yb3cKICAgICAgICAuY29sLWF1dG8ucGUtMAogICAgICAgICAgZmlndXJlCiAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzMuc3ZnIikKICAgICAgICAuY29sLnBzLTIoc3R5bGU9InBsYWNlLXNlbGY6Y2VudGVyOyIpCiAgICAgICAgICBoMy5tYi0wLnBlLTQgQXBsaWNhY2nDs24gZGVsIGRpYnVqbyB0w6ljbmljbyBlbiBwcm9jZXNvcyBpbmR1c3RyaWFsZXMKICAgIAogICAgcChkYXRhLWFvcz0iZmFkZS1yaWdodCIpIEVuIGxhIGluZHVzdHJpYSwgZWwgZGlidWpvIHTDqWNuaWNvIG5vIHNvbG8gZGVzY3JpYmUgbGFzIGNhcmFjdGVyw61zdGljYXMgZsOtc2ljYXMgZGUgdW4gb2JqZXRvLCBzaW5vIHF1ZSB0YW1iacOpbiBzZSBpbnRlZ3JhIGVuIGxvcyBwcm9jZXNvcyBkZSBwcm9kdWNjacOzbiB5IGVuc2FtYmxhamUuIEEgY29udGludWFjacOzbiwgc2UgZGVzY3JpYmVuIGFsZ3VuYXMgZGUgc3VzIGFwbGljYWNpb25lcyBlbiBwcm9jZXNvcyBpbmR1c3RyaWFsZXM6CgogICAgLnJvdy5tdC00CiAgICAgIC5jb2wtbGcoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKQogICAgICAgIEFjb3JkaW9uUkVEKHRpcG89ImEiIGNsYXNlLXRhcmpldGE9InRhcmpldGEiKQogICAgICAgICAgLnJvdy5jb2wteGwtMTEubS1hdXRvKHRpdHVsbz0iRGlzZcOxbyBkZSBjb21wb25lbnRlcyB5IHByb2R1Y3RvcyIpCiAgICAgICAgICAgIHAgbG9zIGluZ2VuaWVyb3MgeSBkaXNlw7FhZG9yZXMgdXRpbGl6YW4gZWwgZGlidWpvIHTDqWNuaWNvIHBhcmEgZGV0YWxsYXIgY2FkYSBjb21wb25lbnRlIGRlIHVuIHByb2R1Y3RvLCBlc3BlY2lmaWNhbmRvIG1hdGVyaWFsZXMsIGRpbWVuc2lvbmVzIHkgYWNhYmFkb3MuIEVzdG8gcGVybWl0ZSBxdWUgY2FkYSBwaWV6YSBlbmNhamUgcGVyZmVjdGFtZW50ZSBlbiBlbCBlbnNhbWJsYWplIGZpbmFsLgogICAgICAgICAgLnJvdy5jb2wteGwtMTEubS1hdXRvKHRpdHVsbz0iUGxhbmlmaWNhY2nDs24gZGUgZmFicmljYWNpw7NuIikKICAgICAgICAgICAgcCBMb3MgZGlidWpvcyB0w6ljbmljb3Mgc29uIGVzZW5jaWFsZXMgZW4gbGEgcGxhbmlmaWNhY2nDs24gZGUgbGEgZmFicmljYWNpw7NuLCB5YSBxdWUgY29udGllbmVuIHRvZGEgbGEgaW5mb3JtYWNpw7NuIHF1ZSBsb3Mgb3BlcmFkb3JlcyBuZWNlc2l0YW4gcGFyYSByZWFsaXphciBjb3J0ZXMsIHBlcmZvcmFjaW9uZXMgeSBlbnNhbWJsYWplcyBwcmVjaXNvcy4gTG9zIHBsYW5vcyBwZXJtaXRlbiBxdWUgY2FkYSBldGFwYSBkZWwgcHJvY2VzbyBkZSBwcm9kdWNjacOzbiBzZSByZWFsaWNlIGRlIGFjdWVyZG8gY29uIGxhcyBlc3BlY2lmaWNhY2lvbmVzIGRlIGRpc2XDsW8uCiAgICAgICAgICAucm93LmNvbC14bC0xMS5tLWF1dG8odGl0dWxvPSJNYW50ZW5pbWllbnRvIHkgcmVwYXJhY2nDs24iKQogICAgICAgICAgICBwIExvcyBkaWJ1am9zIHTDqWNuaWNvcyB0YW1iacOpbiBzb24gZXNlbmNpYWxlcyBwYXJhIGVsIG1hbnRlbmltaWVudG8geSByZXBhcmFjacOzbiBkZSBlcXVpcG9zIGUgaW5mcmFlc3RydWN0dXJhcy4gVW4gcGxhbm8gZGV0YWxsYWRvIHBlcm1pdGUgcXVlIGxvcyB0w6ljbmljb3MgaWRlbnRpZmlxdWVuIHBpZXphcyBlc3BlY8OtZmljYXMgeSByZWFsaWNlbiByZXBhcmFjaW9uZXMgZGUgbWFuZXJhIGVmaWNhei4KICAgICAgICAgIC5yb3cuY29sLXhsLTExLm0tYXV0byh0aXR1bG89IkNvbnRyb2wgZGUgY2FsaWRhZCB5IG5vcm1hdGl2aWRhZCIpCiAgICAgICAgICAgIHAgTG9zIHBsYW5vcyB0w6ljbmljb3MgZGVmaW5lbiBlc3TDoW5kYXJlcyB5IHRvbGVyYW5jaWFzLCBsbyBjdWFsIGVzIGZ1bmRhbWVudGFsIHBhcmEgZWwgY29udHJvbCBkZSBjYWxpZGFkLiBFbiBtdWNoYXMgaW5kdXN0cmlhcywgbG9zIGRpYnVqb3MgdMOpY25pY29zIGRlYmVuIGN1bXBsaXIgY29uIG5vcm1hcyBpbnRlcm5hY2lvbmFsZXMgKGNvbW8gSVNPLCBBU01FKSBwYXJhIGFzZWd1cmFyIHF1ZSBsb3MgcHJvZHVjdG9zIHRlbmdhbiB1bmEgY2FsaWRhZCB1bmlmb3JtZSB5IGN1bXBsYW4gY29uIGxvcyByZXF1aXNpdG9zIGxlZ2FsZXMgeSBkZSBzZWd1cmlkYWQuCiAgICAgIC5jb2wtbGctYXV0by5kLW5vbmUuZC1sZy1ibG9jayhkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzLzYucG5nIikKCiAgICBTZXBhcmFkb3IKCiAgICAudGl0dWxvLXNlZ3VuZG8oZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICBoMiN0XzNfMiAzLjIJSW5zdHJ1bWVudG9zIHkgbWFuZWpvIGVuIGVsIGRpYnVqbyB0w6ljbmljbwoKICAgIC5yb3cKICAgICAgLmNvbC1tZC1hdXRvLmQtbm9uZS5kLW1kLWJsb2NrKGRhdGEtYW9zPSJmYWRlLXJpZ2h0IiBzdHlsZT0icGxhY2Utc2VsZjpjZW50ZXI7IikKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzLzcuc3ZnIikKICAgICAgLmNvbC1tZChkYXRhLWFvcz0iZmFkZS1sZWZ0IiBzdHlsZT0icGxhY2Utc2VsZjpjZW50ZXI7IikKICAgICAgICBwLm1iLTAgRWwgZGlidWpvIHTDqWNuaWNvIHJlcXVpZXJlIHByZWNpc2nDs24geSBleGFjdGl0dWQsIGxvIGN1YWwgc2UgbG9ncmEgY29uIGVsIHVzbyBhZGVjdWFkbyBkZSBpbnN0cnVtZW50b3MgZXNwZWPDrWZpY29zLiBFc3RhIHNlY2Npw7NuIGRldGFsbGEgbG9zIHByaW5jaXBhbGVzIGluc3RydW1lbnRvcyBlbXBsZWFkb3MgZW4gZWwgZGlidWpvIHTDqWNuaWNvLCBsYSBjb3JyZWN0YSBlamVjdWNpw7NuIGRlIGxldHJhcyB0w6ljbmljYXMgcGFyYSB1bmEgY29tdW5pY2FjacOzbiBjbGFyYSwgeSBsb3MgdGlwb3MgZGUgbMOtbmVhcywgZXNlbmNpYWxlcyBwYXJhIHJlcHJlc2VudGFyIGRpZmVyZW50ZXMgcGFydGVzIHkgYXNwZWN0b3MgZGUgdW4gb2JqZXRvIGVuIHVuIHBsYW5vLgogICAgCiAgICAuY29udF9kZWNvcmF0aXZvLm1iLTQubXQtNShkYXRhLWFvcz0iZmFkZS1yaWdodCIpCiAgICAgIC5yb3cKICAgICAgICAuY29sLWF1dG8ucGUtMAogICAgICAgICAgZmlndXJlCiAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzMuc3ZnIikKICAgICAgICAuY29sLnBzLTIoc3R5bGU9InBsYWNlLXNlbGY6Y2VudGVyOyIpCiAgICAgICAgICBoMy5tYi0wLnBlLTQgSW5zdHJ1bWVudG9zIGLDoXNpY29zIGRlbCBkaWJ1am8gdMOpY25pY28KICAgIAogICAgcChkYXRhLWFvcz0iZmFkZS1yaWdodCIpIENhZGEgaW5zdHJ1bWVudG8gZGUgZGlidWpvIHTDqWNuaWNvIHRpZW5lIHVuYSBmdW5jacOzbiBlc3BlY8OtZmljYSB5IHN1IHVzbyBjb3JyZWN0byBlcyBjbGF2ZSBwYXJhIG9idGVuZXIgdW4gdHJhemFkbyBsaW1waW8geSBwcmVjaXNvLiBBIGNvbnRpbnVhY2nDs24sIHNlIGRlc2NyaWJlbiBsb3MgcHJpbmNpcGFsZXMgaW5zdHJ1bWVudG9zLgoKICAgIC5jb2wteGwtOC5tLWF1dG8ubXQtNQogICAgICAudGl0dWxvLXNleHRvLmNvbG9yLWFjZW50by1jb250ZW5pZG8ubXQtNShkYXRhLWFvcz0iZmFkZS1kb3duIikKICAgICAgICBoNSBUYWJsYSA0LgogICAgICAgIHNwYW4gSW5zdHJ1bWVudG9zIGLDoXNpY29zIGRlIGRpYnVqbwogICAgICAudGFibGEtYS5jb2xvci1hY2VudG8tYm90b25lcyhkYXRhLWFvcz0iZmFkZS11cCIpCiAgICAgICAgdGFibGUKICAgICAgICAgIGNhcHRpb24uZnctbm9ybWFsIEZ1ZW50ZTogT0lULCAyMDI0LgogICAgICAgICAgdGhlYWQoc3R5bGU9ImJvcmRlcjowOyIpCiAgICAgICAgICAgIHRyLnRleHQtY2VudGVyKHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiM3OEI2MkU7IikKICAgICAgICAgICAgICB0aCBJbnN0cnVtZW50bwogICAgICAgICAgICAgIHRoIE9ic2VydmFjacOzbgogICAgICAgICAgdGJvZHkKICAgICAgICAgICAgdHIoc3R5bGU9ImJhY2tncm91bmQtY29sb3I6I0Y2RjZGNjsiKQogICAgICAgICAgICAgIHRkLnRleHQtY2VudGVyKHN0eWxlPSJib3JkZXI6MDtib3JkZXItcmlnaHQ6MXB4ICNBRkFGQUYgc29saWQ7IikgIFJlZ2xhCiAgICAgICAgICAgICAgdGQoc3R5bGU9ImJvcmRlcjowO2JvcmRlci1yaWdodDoxcHggI0FGQUZBRiBzb2xpZDsiKSAgU2UgZW1wbGVhIHBhcmEgbWVkaXIgZGlzdGFuY2lhcyB5IHRyYXphciBsw61uZWFzIHJlY3Rhcy4gRXMgZXNwZWNpYWxtZW50ZSDDunRpbCBwYXJhIGFjb3RhciBkaW1lbnNpb25lcyBlbiB1biBkaWJ1am8uCiAgICAgICAgICAgIHRyKHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7IikKICAgICAgICAgICAgICB0ZC50ZXh0LWNlbnRlcihzdHlsZT0iYm9yZGVyOjA7Ym9yZGVyLXJpZ2h0OjFweCAjQUZBRkFGIHNvbGlkOyIpICBFc2N1YWRyYQogICAgICAgICAgICAgIHRkKHN0eWxlPSJib3JkZXI6MDtib3JkZXItcmlnaHQ6MXB4ICNBRkFGQUYgc29saWQ7IikgIEdlbmVyYWxtZW50ZSBkZSAzMMKwLTYwwrAgbyBkZSA0NcKwLCBwZXJtaXRlbiB0cmF6YXIgw6FuZ3Vsb3MgcmVjdG9zIHkgb3RyYXMgaW5jbGluYWNpb25lcyBjb211bmVzIGVuIGxvcyBwbGFub3MgdMOpY25pY28uCiAgICAgICAgICAgIHRyKHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiNGNkY2RjY7IikKICAgICAgICAgICAgICB0ZC50ZXh0LWNlbnRlcihzdHlsZT0iYm9yZGVyOjA7Ym9yZGVyLXJpZ2h0OjFweCAjQUZBRkFGIHNvbGlkOyIpICBDb21ww6FzCiAgICAgICAgICAgICAgdGQoc3R5bGU9ImJvcmRlcjowO2JvcmRlci1yaWdodDoxcHggI0FGQUZBRiBzb2xpZDsiKSAgUGVybWl0ZSBkaWJ1amFyIGPDrXJjdWxvcyB5IGFyY29zIHByZWNpc29zLiBUYW1iacOpbiBzZSB1c2EgcGFyYSBkaXZpZGlyIGxvbmdpdHVkZXMgZW4gc2VnbWVudG9zIGlndWFsZXMuCiAgICAgICAgICAgIHRyKHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7IikKICAgICAgICAgICAgICB0ZC50ZXh0LWNlbnRlcihzdHlsZT0iYm9yZGVyOjA7Ym9yZGVyLXJpZ2h0OjFweCAjQUZBRkFGIHNvbGlkOyIpICBUcmFuc3BvcnRhZG9yCiAgICAgICAgICAgICAgdGQoc3R5bGU9ImJvcmRlcjowO2JvcmRlci1yaWdodDoxcHggI0FGQUZBRiBzb2xpZDsiKSAgU2UgdXRpbGl6YSBwYXJhIG1lZGlyIHkgdHJhemFyIMOhbmd1bG9zLiBFc3RvIGVzIGZ1bmRhbWVudGFsIGVuIGxhIHJlcHJlc2VudGFjacOzbiBkZSBmaWd1cmFzIGNvbXBsZWphcyBxdWUgcmVxdWllcmVuIHByZWNpc2nDs24gYW5ndWxhci4KICAgICAgICAgICAgdHIoc3R5bGU9ImJhY2tncm91bmQtY29sb3I6I0Y2RjZGNjsiKQogICAgICAgICAgICAgIHRkLnRleHQtY2VudGVyKHN0eWxlPSJib3JkZXI6MDtib3JkZXItcmlnaHQ6MXB4ICNBRkFGQUYgc29saWQ7IikgIEVzY2Fsw61tZXRybwogICAgICAgICAgICAgIHRkKHN0eWxlPSJib3JkZXI6MDtib3JkZXItcmlnaHQ6MXB4ICNBRkFGQUYgc29saWQ7IikgIEVzIHVuYSByZWdsYSBkZSBzZWNjaW9uZXMgdHJpYW5ndWxhcmVzIGNvbiBkaWZlcmVudGVzIGVzY2FsYXMgKDE6NTAsIDE6MTAwLCBldGMuKSBxdWUgcGVybWl0ZSByZXByZXNlbnRhciBvYmpldG9zIGEgdW5hIGVzY2FsYSByZWR1Y2lkYSBvIGFtcGxpYWRhLgogICAgICAgICAgICB0cihzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjojZmZmOyIpCiAgICAgICAgICAgICAgdGQudGV4dC1jZW50ZXIoc3R5bGU9ImJvcmRlcjowO2JvcmRlci1yaWdodDoxcHggI0FGQUZBRiBzb2xpZDsiKSAgTMOhcGljZXMgeSBQb3J0YW1pbmFzCiAgICAgICAgICAgICAgdGQoc3R5bGU9ImJvcmRlcjowO2JvcmRlci1yaWdodDoxcHggI0FGQUZBRiBzb2xpZDsiKSAgTG9zIGzDoXBpY2VzIHkgcG9ydGFtaW5hcyBkZSBkaWZlcmVudGVzIGR1cmV6YXMgKEgsIEhCLCAyQiwgZXRjLikgU2UgdXRpbGl6YW4gcGFyYSB0cmF6YXIgbMOtbmVhcyBkZSBkaXN0aW50byBncm9zb3IgeSB0b25hbGlkYWQsIG5lY2VzYXJpb3MgcGFyYSBkaXN0aW5ndWlyIGRpZmVyZW50ZXMgcGFydGVzIGRlbCBkaWJ1am8uCiAgICAKICAgIC5jb250X2RlY29yYXRpdm8ubWItNC5tdC01KGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikKICAgICAgLnJvdwogICAgICAgIC5jb2wtYXV0by5wZS0wCiAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvMy5zdmciKQogICAgICAgIC5jb2wucHMtMihzdHlsZT0icGxhY2Utc2VsZjpjZW50ZXI7IikKICAgICAgICAgIGgzLm1iLTAucGUtNCBMZXRyYXMgdMOpY25pY2FzCiAgICAKICAgIHAoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKSBTb24gdW4gY29tcG9uZW50ZSBlc2VuY2lhbCBlbiBlbCBkaWJ1am8gdMOpY25pY28sIHlhIHF1ZSBwZXJtaXRlbiBhbm90YXIgZGltZW5zaW9uZXMsIGVzcGVjaWZpY2FjaW9uZXMgeSBub3RhcyBkZSBmb3JtYSBjbGFyYSB5IHVuaWZvcm1lLiBMYSB1bmlmb3JtaWRhZCB5IGxlZ2liaWxpZGFkIHNvbiBhc3BlY3RvcyBjbGF2ZSBlbiBsYXMgbGV0cmFzIHTDqWNuaWNhcywgeWEgcXVlIGN1YWxxdWllciBhbWJpZ8O8ZWRhZCBlbiBsYSBlc2NyaXR1cmEgcG9kcsOtYSBnZW5lcmFyIGVycm9yZXMgZGUgaW50ZXJwcmV0YWNpw7NuLgoKICAgIC5yb3cubXQtNAogICAgICAuY29sLWxnLWF1dG8uZC1ub25lLmQtbGctYmxvY2soZGF0YS1hb3M9ImZhZGUtcmlnaHQiKQogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTMvOC5wbmciKQogICAgICAuY29sLWxnKGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgIEFjb3JkaW9uUkVEKHRpcG89ImEiIGNsYXNlLXRhcmpldGE9InRhcmpldGEiKQogICAgICAgICAgLnJvdy5jb2wteGwtMTEubS1hdXRvKHRpdHVsbz0iRXN0aWxvIGRlIGxldHJhcyAiKQogICAgICAgICAgICBwIEVuIGVsIGRpYnVqbyB0w6ljbmljbywgc2UgZW1wbGVhbiBnZW5lcmFsbWVudGUgbGV0cmFzIGVuIG1hecO6c2N1bGFzLCBkZSB0cmF6byB1bmlmb3JtZSB5IGNsYXJvLiBMYSBlc3RhbmRhcml6YWNpw7NuIGVuIGVsIHRhbWHDsW8geSBlbCBlc3RpbG8gZmFjaWxpdGEgbGEgbGVjdHVyYSBkZWwgZGlidWpvIHBvciBkaWZlcmVudGVzIHBlcnNvbmFzLgogICAgICAgICAgLnJvdy5jb2wteGwtMTEubS1hdXRvKHRpdHVsbz0iQWx0dXJhIHkgZXNwYWNpYWRvIikKICAgICAgICAgICAgcCBMYXMgbGV0cmFzIGRlYmVuIHRlbmVyIHVuYSBhbHR1cmEgY29uc3RhbnRlLCBub3JtYWxtZW50ZSBkZSAzIGEgNSBtbSwgZGVwZW5kaWVuZG8gZGUgbGFzIGVzcGVjaWZpY2FjaW9uZXMgZGVsIHBsYW5vLiBFbCBlc3BhY2lhZG8gZW50cmUgbGV0cmFzIHkgcGFsYWJyYXMgZGViZSBzZXIgdW5pZm9ybWUgcGFyYSBldml0YXIgY29uZnVzacOzbi4KICAgICAgICAgIC5yb3cuY29sLXhsLTExLm0tYXV0byh0aXR1bG89IlVzbyBkZSBwbGFudGlsbGFzIG8gZ3XDrWFzIikKICAgICAgICAgICAgcCBQYXJhIGFzZWd1cmFyIHF1ZSBlbCB0cmF6byBkZSBjYWRhIGxldHJhIHNlYSBjb25zaXN0ZW50ZSwgc2UgcmVjb21pZW5kYSB1dGlsaXphciB1bmEgcGxhbnRpbGxhIGRlIGxldHJhcyBvIGd1w61hcyBkZSB0cmF6YWRvLiBMYXMgcGxhbnRpbGxhcyBwZXJtaXRlbiByZWFsaXphciBsZXRyYXMgZGUgdGFtYcOxbyB5IGVzcGFjaWFkbyBjb25zdGFudGVzLCBsbyBjdWFsIGVzIGVzcGVjaWFsbWVudGUgw7p0aWwgZW4gcGxhbm9zIGRldGFsbGFkb3MgY29uIG11Y2hhcyBhbm90YWNpb25lcy4KICAgIAogICAgLmNvbnRfZGVjb3JhdGl2by5tYi00Lm10LTUoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKQogICAgICAucm93CiAgICAgICAgLmNvbC1hdXRvLnBlLTAKICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS8zLnN2ZyIpCiAgICAgICAgLmNvbC5wcy0yKHN0eWxlPSJwbGFjZS1zZWxmOmNlbnRlcjsiKQogICAgICAgICAgaDMubWItMC5wZS00IFRpcG9zIGRlIGzDrW5lYSB5IHN1IHNpZ25pZmljYWRvCiAgICAKICAgIHAoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKSBFbiBlbCBkaWJ1am8gdMOpY25pY28sIGV4aXN0ZW4gZGlmZXJlbnRlcyB0aXBvcyBkZSBsw61uZWEsIGNhZGEgdW5hIGNvbiB1biBwcm9ww7NzaXRvIGVzcGVjw61maWNvLiBFc3RhcyBsw61uZWFzIHBlcm1pdGVuIHJlcHJlc2VudGFyIGRldGFsbGVzIGRlbCBvYmpldG8geSBheXVkYW4gYSBldml0YXIgY29uZnVzacOzbiBlbiBsYSBpbnRlcnByZXRhY2nDs24gZGVsIGRpYnVqby4gTG9zIHByaW5jaXBhbGVzIHRpcG9zIGRlIGzDrW5lYSBzb246CgogICAgLmNvbC14bC04Lm0tYXV0by5tdC01CiAgICAgIC50aXR1bG8tc2V4dG8uY29sb3ItYWNlbnRvLWNvbnRlbmlkby5tdC01KGRhdGEtYW9zPSJmYWRlLWRvd24iKQogICAgICAgIGg1IFRhYmxhIDUuCiAgICAgICAgc3BhbiBUaXBvcyBkZSBsw61uZWFzIGVuIGRpYnVqbyB0w6ljbmljbwogICAgICAudGFibGEtYS5jb2xvci1hY2VudG8tYm90b25lcyhkYXRhLWFvcz0iZmFkZS11cCIpCiAgICAgICAgdGFibGUKICAgICAgICAgIGNhcHRpb24uZnctbm9ybWFsIEZ1ZW50ZTogT0lULCAyMDI0LgogICAgICAgICAgdGhlYWQoc3R5bGU9ImJvcmRlcjowOyIpCiAgICAgICAgICAgIHRyLnRleHQtY2VudGVyKHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiM3OEI2MkU7IikKICAgICAgICAgICAgICB0aCBUaXBvIGRlIGzDrW5lYQogICAgICAgICAgICAgIHRoIFVzby9jYXJhY3RlcsOtc3RpY2EKICAgICAgICAgIHRib2R5CiAgICAgICAgICAgIHRyKHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiNGNkY2RjY7IikKICAgICAgICAgICAgICB0ZC50ZXh0LWNlbnRlcihzdHlsZT0iYm9yZGVyOjA7Ym9yZGVyLXJpZ2h0OjFweCAjQUZBRkFGIHNvbGlkOyIpICBMw61uZWEgZGUgY29udG9ybm8KICAgICAgICAgICAgICB0ZChzdHlsZT0iYm9yZGVyOjA7Ym9yZGVyLXJpZ2h0OjFweCAjQUZBRkFGIHNvbGlkOyIpICAKICAgICAgICAgICAgICAgIHAgUmVwcmVzZW50YSBlbCBjb250b3JubyB2aXNpYmxlIGRlbCBvYmpldG8uIEVzIGVsIGJvcmRlIHByaW5jaXBhbCBxdWUgZGVmaW5lIGxhIGZvcm1hIHkgbG9zIGzDrW1pdGVzIGRlbCBvYmpldG8gZW4gZWwgZGlidWpvLiAKICAgICAgICAgICAgICAgIHAgU2UgdHJhemEgY29uIGzDrW5lYXMgY29udGludWFzIHkgZGUgZ3Jvc29yIG1lZGlvIGEgZ3J1ZXNvIHBhcmEgcXVlIHNlYW4gdmlzaWJsZXMgZGUgaW5tZWRpYXRvLgogICAgICAgICAgICB0cihzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjojZmZmOyIpCiAgICAgICAgICAgICAgdGQudGV4dC1jZW50ZXIoc3R5bGU9ImJvcmRlcjowO2JvcmRlci1yaWdodDoxcHggI0FGQUZBRiBzb2xpZDsiKSBMw61uZWEgZGUgY2VudHJvCiAgICAgICAgICAgICAgdGQoc3R5bGU9ImJvcmRlcjowO2JvcmRlci1yaWdodDoxcHggI0FGQUZBRiBzb2xpZDsiKSAgCiAgICAgICAgICAgICAgICBwIEluZGljYSBlbCBjZW50cm8gZGUgdW4gb2JqZXRvIHNpbcOpdHJpY28sIGNvbW8gZWwgY2VudHJvIGRlIHVuIGPDrXJjdWxvIG8gZWwgZWplIGRlIHVuYSBwaWV6YS4KICAgICAgICAgICAgICAgIHAgU2UgcmVwcmVzZW50YSBjb24gdW5hIGzDrW5lYSBkZSB0cmF6b3MgbGFyZ29zIHkgY29ydG9zIGFsdGVybmFkb3MuIEVzdGUgdGlwbyBkZSBsw61uZWEgYXl1ZGEgYSBpZGVudGlmaWNhciBsYSBzaW1ldHLDrWEgeSBsb3MgcHVudG9zIGNlbnRyYWxlcyBlbiBlbCBkaXNlw7FvLgogICAgICAgICAgICB0cihzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjojRjZGNkY2OyIpCiAgICAgICAgICAgICAgdGQudGV4dC1jZW50ZXIoc3R5bGU9ImJvcmRlcjowO2JvcmRlci1yaWdodDoxcHggI0FGQUZBRiBzb2xpZDsiKSAgTMOtbmVhIG9jdWx0YQogICAgICAgICAgICAgIHRkKHN0eWxlPSJib3JkZXI6MDtib3JkZXItcmlnaHQ6MXB4ICNBRkFGQUYgc29saWQ7IikgIAogICAgICAgICAgICAgICAgcCBJbmRpY2EgbGFzIHBhcnRlcyBkZWwgb2JqZXRvIHF1ZSBlc3TDoW4gb2N1bHRhcyBkZXRyw6FzIGRlIG90cmFzIHBhcnRlcywgZXMgZGVjaXIsIHBhcnRlcyBubyB2aXNpYmxlcyBkZXNkZSBsYSB2aXN0YSBhY3R1YWwuCiAgICAgICAgICAgICAgICBwIFNlIHRyYXphIGNvbiB1bmEgbMOtbmVhIGRlIHRyYXpvcyBjb3J0b3MgeSBlcXVpZGlzdGFudGVzLiBMYXMgbMOtbmVhcyBvY3VsdGFzIHNvbiDDunRpbGVzIHBhcmEgdmlzdWFsaXphciBlbCBvYmpldG8gY29tcGxldG8sIGluY2x1eWVuZG8gbG9zIGVsZW1lbnRvcyBxdWUgbm8gc2UgdmVuIGRpcmVjdGFtZW50ZSBlbiBsYSB2aXN0YSBwcmluY2lwYWwuCiAgICAgICAgICAgIHRyKHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7IikKICAgICAgICAgICAgICB0ZC50ZXh0LWNlbnRlcihzdHlsZT0iYm9yZGVyOjA7Ym9yZGVyLXJpZ2h0OjFweCAjQUZBRkFGIHNvbGlkOyIpIEzDrW5lYSBkZSBhY290YWNpw7NuCiAgICAgICAgICAgICAgdGQoc3R5bGU9ImJvcmRlcjowO2JvcmRlci1yaWdodDoxcHggI0FGQUZBRiBzb2xpZDsiKSAgCiAgICAgICAgICAgICAgICBwIEVzcGVjaWZpY2EgZGltZW5zaW9uZXMgeSB0b2xlcmFuY2lhcy4gU2UgdXRpbGl6YSBwYXJhIGluZGljYXIgbWVkaWRhcyBleGFjdGFzIGRlbCBvYmpldG8sIGFzw60gY29tbyBkZXRhbGxlcyBlc3BlY8OtZmljb3MgZGUgdGFtYcOxbyBvIHBvc2ljacOzbi4KICAgICAgICAgICAgICAgIHAgRXMgdW5hIGzDrW5lYSBjb250aW51YSB5IGRlbGdhZGEgY29uIGZsZWNoYXMgZW4gYW1ib3MgZXh0cmVtb3MsIGluZGljYW5kbyBlbCBwdW50byBkZXNkZSBkb25kZSBzZSB0b21hIGxhIG1lZGlkYS4gTGFzIGNpZnJhcyBkZSBhY290YWNpw7NuIChtZWRpZGFzKSBzZSBjb2xvY2FuIHNvYnJlIG8ganVudG8gYSBsYSBsw61uZWEgcGFyYSB1bmEgaW50ZXJwcmV0YWNpw7NuIGNsYXJhLgogICAgICAgICAgICB0cihzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjojRjZGNkY2OyIpCiAgICAgICAgICAgICAgdGQudGV4dC1jZW50ZXIoc3R5bGU9ImJvcmRlcjowO2JvcmRlci1yaWdodDoxcHggI0FGQUZBRiBzb2xpZDsiKSAgTMOtbmVhIGRlIHByb3llY2Npw7NuCiAgICAgICAgICAgICAgdGQoc3R5bGU9ImJvcmRlcjowO2JvcmRlci1yaWdodDoxcHggI0FGQUZBRiBzb2xpZDsiKSAgCiAgICAgICAgICAgICAgICBwIEd1w61hIGxhIHViaWNhY2nDs24gZGUgbGFzIGFjb3RhY2lvbmVzIHkgc2XDsWFsYSBsb3MgbMOtbWl0ZXMgZW50cmUgbG9zIHF1ZSBzZSBtaWRlLiBTZSB0cmF6YSBjb21vIHVuYSBsw61uZWEgZGVsZ2FkYSB5IGNvbnRpbsO6YSBkZXNkZSBlbCBwdW50byBkZWwgb2JqZXRvIGhhc3RhIGxhIGzDrW5lYSBkZSBhY290YWNpw7NuCiAgICAgICAgICAgIHRyKHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7IikKICAgICAgICAgICAgICB0ZC50ZXh0LWNlbnRlcihzdHlsZT0iYm9yZGVyOjA7Ym9yZGVyLXJpZ2h0OjFweCAjQUZBRkFGIHNvbGlkOyIpIEzDrW5lYSBkZSBlamUKICAgICAgICAgICAgICB0ZChzdHlsZT0iYm9yZGVyOjA7Ym9yZGVyLXJpZ2h0OjFweCAjQUZBRkFGIHNvbGlkOyIpICBSZXByZXNlbnRhIGxvcyBlamVzIGRlIHNpbWV0csOtYSBvIGVsIGVqZSBsb25naXR1ZGluYWwgZGUgZWxlbWVudG9zIGNpbMOtbmRyaWNvcyBvIHJlZG9uZG9zLiBFcyB1bmEgbMOtbmVhIGRlbGdhZGEgY29tcHVlc3RhIHBvciB0cmF6b3MgbGFyZ29zIHNlcGFyYWRvcyBwb3IgdW4gcGVxdWXDsW8gZXNwYWNpby4KCiAgICBwLm10LTUoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKSBDYWRhIHRpcG8gZGUgbMOtbmVhIHRpZW5lIHVuIHByb3DDs3NpdG8gZXNwZWPDrWZpY28gZW4gZWwgZGlidWpvIHTDqWNuaWNvIHkgY29udHJpYnV5ZSBhIGxhIGNsYXJpZGFkIHkgcHJlY2lzacOzbiBkZSBsYSByZXByZXNlbnRhY2nDs24gZ3LDoWZpY2EuIFVzYXIgY29ycmVjdGFtZW50ZSBlc3RvcyB0aXBvcyBkZSBsw61uZWEgZ2FyYW50aXphIHF1ZSBlbCBkaWJ1am8gcHVlZGEgc2VyIGludGVycHJldGFkbyBzaW4gYW1iaWfDvGVkYWRlcywgZmFjaWxpdGFuZG8gbGEgY29tdW5pY2FjacOzbiBkZSBpbmZvcm1hY2nDs24gdMOpY25pY2EuCgogICAgLmNvbC14bC0xMC5tLWF1dG8ubXQtNQogICAgICAudGl0dWxvLXNleHRvLmNvbG9yLWFjZW50by1jb250ZW5pZG8ubXQtNShkYXRhLWFvcz0iZmFkZS1kb3duIikKICAgICAgICBoNSBGaWd1cmEgMi4KICAgICAgICBzcGFuIFRpcG9zIGRlIGzDrW5lYSBlbiBkaWJ1am8gdMOpY25pY28KICAgICAgLnAtMy5wLWxnLTQoc3R5bGU9ImJhY2tncm91bmQtY29sb3I6I0Y5RjdGNDtib3JkZXItcmFkaXVzOjE1cHg7IikKICAgICAgICBmaWd1cmUoZGF0YS1hb3M9ImZhZGUtdXAiKQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTMvOS5zdmciIGFsdD0iTGEgRmlndXJhIDIgc2UgZGVub21pbmEg4oCcVGlwb3MgZGUgbMOtbmVhIGVuIGRpYnVqbyB0w6ljbmljb+KAnS4gTGEgaW1hZ2VuIG11ZXN0cmEgdW5hIGd1w61hIGRlIHRpcG9zIGRlIGzDrW5lYXMgdXRpbGl6YWRhcyBlbiBkaWJ1am8gdMOpY25pY28sIGluY2x1eWVuZG8gMTIgZGlmZXJlbnRlcyBlc3RpbG9zIGRlc2RlIGzDrW5lYXMgZ3J1ZXNhcyBjb250aW51YXMgaGFzdGEgbMOtbmVhcyBmaW5hcyBjb24gemlnemFnLiBDYWRhIHRpcG8gc2UgYWNvbXBhw7FhIGRlIHN1IGRlc2NyaXBjacOzbiB5IHVzbyBlc3BlY8OtZmljbywgY29tbyBjb250b3Jub3MgdmlzaWJsZXMsIGzDrW5lYXMgZGUgY290YSwgZWplcyBkZSBzaW1ldHLDrWEgeSBjb3J0ZXMuIEFsIGZpbmFsIGluY2x1eWUgdW5hIG5vdGEgc29icmUgbGFzIHByb3BvcmNpb25lcyBkZSBncm9zb3IgKGdydWVzYSAxLCBtZWRpYSAwLjUsIGZpbmEgMC4yKSB5IHVuIGVqZW1wbG8gZGUgYXBsaWNhY2nDs24gZW4gY29ydGVzIGRlIGZpZ3VyYXMuIikKICAgIAogICAgU2VwYXJhZG9yCgogICAgLnRpdHVsby1zZWd1bmRvKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgaDIjdF8zXzMgMy4zCU5vY2lvbmVzIGRlIGdlb21ldHLDrWEgcGxhbmEKCiAgICAucm93CiAgICAgIC5jb2wtbWQtYXV0by5kLW5vbmUuZC1tZC1ibG9jayhkYXRhLWFvcz0iZmFkZS1yaWdodCIgc3R5bGU9InBsYWNlLXNlbGY6Y2VudGVyOyIpCiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMy8xMC5zdmciKQogICAgICAuY29sLW1kKGRhdGEtYW9zPSJmYWRlLWxlZnQiIHN0eWxlPSJwbGFjZS1zZWxmOmNlbnRlcjsiKQogICAgICAgIHAubWItMCBMYSBnZW9tZXRyw61hIHBsYW5hIGVzIGxhIGJhc2UgZGVsIGRpYnVqbyB0w6ljbmljbywgeWEgcXVlIHByb3BvcmNpb25hIGxvcyBlbGVtZW50b3MgZnVuZGFtZW50YWxlcyBwYXJhIGNvbnN0cnVpciByZXByZXNlbnRhY2lvbmVzIGdyw6FmaWNhcyBwcmVjaXNhcyBkZSBvYmpldG9zIHkgZXN0cnVjdHVyYXMuIExhIGNvbXByZW5zacOzbiBkZSBjb25jZXB0b3MgYsOhc2ljb3MgY29tbyBwdW50b3MsIGzDrW5lYXMsIHNlZ21lbnRvcywgeSDDoW5ndWxvcyBlcyBlc2VuY2lhbCBwYXJhIHRyYXphciBmaWd1cmFzIHkgZXN0cnVjdHVyYXMgZW4gcGxhbm9zLCB5IHBhcmEgZ2FyYW50aXphciBxdWUgY2FkYSB0cmF6byB5IG1lZGlkYSBzZWEgZXhhY3RvLgogICAgCiAgICAuY29udF9kZWNvcmF0aXZvLm1iLTQubXQtNShkYXRhLWFvcz0iZmFkZS1yaWdodCIpCiAgICAgIC5yb3cKICAgICAgICAuY29sLWF1dG8ucGUtMAogICAgICAgICAgZmlndXJlCiAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzMuc3ZnIikKICAgICAgICAuY29sLnBzLTIoc3R5bGU9InBsYWNlLXNlbGY6Y2VudGVyOyIpCiAgICAgICAgICBoMy5tYi0wLnBlLTQgIENvbmNlcHRvcyBiw6FzaWNvcwogICAgCiAgICBwKGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikgSW5jbHV5ZW4gbG9zIGVsZW1lbnRvcyBtw6FzIHNpbXBsZXMgeSBlc2VuY2lhbGVzIGVuIGVsIGRpYnVqbyB0w6ljbmljbywgcXVlIHBlcm1pdGVuIGRlZmluaXIgeSBlc3RydWN0dXJhciBmaWd1cmFzIG3DoXMgY29tcGxlamFzOyBlbnRyZSBlbGxvcyBzZSBlbmN1ZW50cmFuOgoKICAgIC5yb3cubXQtNAogICAgICAuY29sLWxnLWF1dG8uZC1ub25lLmQtbGctYmxvY2soZGF0YS1hb3M9ImZhZGUtcmlnaHQiKQogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTMvMTEucG5nIikKICAgICAgLmNvbC1sZyhkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICAucC0zLnAtbGctNChzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjojMjk0QjZEO2JvcmRlci1yYWRpdXM6NXB4OyIpCiAgICAgICAgICB1bC5saXN0YS11bC5tYi0wCiAgICAgICAgICAgIGxpLmQtZmxleC5iZy13aGl0ZS5wLTIoc3R5bGU9ImJvcmRlci1yYWRpdXM6NHB4OyIpCiAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlKHN0eWxlPSJjb2xvcjojNzhCNjJFOyIpCiAgICAgICAgICAgICAgc3BhbiAjW3N0cm9uZyBQdW50bzpdIEVzIGxhIHVuaWRhZCBnZW9tw6l0cmljYSBtw6FzIGLDoXNpY2EgeSByZXByZXNlbnRhIHVuYSB1YmljYWNpw7NuIGV4YWN0YSBlbiBlbCBlc3BhY2lvLCBzaW4gZGltZW5zaW9uZXMgbmkgZXh0ZW5zacOzbi4gRW4gbG9zIHBsYW5vcyB0w6ljbmljb3MsIGxvcyBwdW50b3Mgc2UgdXNhbiBwYXJhIHNlw7FhbGFyIHViaWNhY2lvbmVzIHByZWNpc2FzLCBjb21vIGNlbnRyb3MgZGUgY8OtcmN1bG9zLCB2w6lydGljZXMgZGUgZmlndXJhcyBnZW9tw6l0cmljYXMgeSBwdW50b3MgZGUgaW50ZXJzZWNjacOzbiBlbnRyZSBsw61uZWFzLiBTb24gcmVmZXJlbmNpYXMgaW1wb3J0YW50ZXMgcGFyYSBjb25zdHJ1aXIgb3RyYXMgZmlndXJhcy4KICAgICAgICAgICAgbGkuZC1mbGV4LmJnLXdoaXRlLnAtMihzdHlsZT0iYm9yZGVyLXJhZGl1czo0cHg7IikKICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiM3OEI2MkU7IikKICAgICAgICAgICAgICBzcGFuICNbc3Ryb25nIEzDrW5lYTpdIGVzIHVuYSBzdWNlc2nDs24gaW5maW5pdGEgZGUgcHVudG9zIGVuIHVuYSBzb2xhIGRpbWVuc2nDs24uIFRpZW5lIGxvbmdpdHVkLCBwZXJvIG5vIGFuY2hvIG5pIHByb2Z1bmRpZGFkLiBTZSB1dGlsaXphbiBwYXJhIHJlcHJlc2VudGFyIGxvcyBjb250b3Jub3MgZGUgb2JqZXRvcywgbG9zIGVqZXMgZGUgc2ltZXRyw61hIHkgbGFzIGRpdmlzaW9uZXMgZW50cmUgZGlmZXJlbnRlcyBwYXJ0ZXMgZGUgdW4gcGxhbm8uIEV4aXN0ZW4gbMOtbmVhcyByZWN0YXMgKGVuIHVuYSBzb2xhIGRpcmVjY2nDs24pIHkgY3VydmFzIChjYW1iaWFuIGRlIGRpcmVjY2nDs24gY29udGludWFtZW50ZSksIHkgc3UgdHJhem8gZXMgZXNlbmNpYWwgZW4gZWwgZGlzZcOxbyBkZSBwZXJmaWxlcyB5IGNvbnRvcm5vcyBkZSBwaWV6YXMuCiAgICAgICAgICAgIGxpLmQtZmxleC5iZy13aGl0ZS5wLTIubWItMChzdHlsZT0iYm9yZGVyLXJhZGl1czo0cHg7IikKICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiM3OEI2MkU7IikKICAgICAgICAgICAgICBzcGFuICNbc3Ryb25nIFNlZ21lbnRvOl0gRXMgdW5hIHBvcmNpw7NuIGRlIGzDrW5lYSBkZWxpbWl0YWRhIHBvciBkb3MgcHVudG9zIGZpbmFsZXMuIEEgZGlmZXJlbmNpYSBkZSB1bmEgbMOtbmVhLCB1biBzZWdtZW50byB0aWVuZSB1bmEgbG9uZ2l0dWQgZmluaXRhLiBTZSB1c2FuIHBhcmEgZGVmaW5pciBib3JkZXMgeSBsw61taXRlcyBlc3BlY8OtZmljb3MgZGVudHJvIGRlIHVuIGRpc2XDsW8sIGNvbW8gbG9zIGxhZG9zIGRlIHVuIHJlY3TDoW5ndWxvIG8gZWwgcmFkaW8gZGUgdW4gY8OtcmN1bG8uIFNlIGFwbGljYW4gZW4gZWwgdHJhemFkbyBkZSBwZXJmaWxlcyB5IGxhIGNvbnN0cnVjY2nDs24gZGUgZmlndXJhcyBnZW9tw6l0cmljYXMuCiAgICAKICAgIC5yb3cubXQtNAogICAgICAuY29sLWxnKGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikKICAgICAgICAucC0zLnAtbGctNChzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjojMjk0QjZEO2JvcmRlci1yYWRpdXM6NXB4OyIpCiAgICAgICAgICB1bC5saXN0YS11bC5tYi0wCiAgICAgICAgICAgIGxpLmQtZmxleC5iZy13aGl0ZS5wLTIoc3R5bGU9ImJvcmRlci1yYWRpdXM6NHB4OyIpCiAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlKHN0eWxlPSJjb2xvcjojNzhCNjJFOyIpCiAgICAgICAgICAgICAgc3BhbiAjW3N0cm9uZyDDgW5ndWxvOl0gRXMgbGEgbWVkaWRhIGRlIGxhIGFwZXJ0dXJhIGZvcm1hZGEgZW50cmUgZG9zIGzDrW5lYXMgbyBzZWdtZW50b3MgcXVlIHNlIGludGVyc2VjYW4gZW4gdW4gcHVudG8gbGxhbWFkbyB2w6lydGljZS4KICAgICAgICAgICAgbGkuZC1mbGV4LmJnLXdoaXRlLnAtMihzdHlsZT0iYm9yZGVyLXJhZGl1czo0cHg7IikKICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiM3OEI2MkU7IikKICAgICAgICAgICAgICBzcGFuICNbc3Ryb25nIFRpcG9zIGRlIMOBbmd1bG9zOl0gRW4gZWwgZGlidWpvIHTDqWNuaWNvLCBzZSB1c2FuIGNvbcO6bm1lbnRlOgogICAgICAgICAgICBsaS5kLWZsZXguYmctd2hpdGUucC0yKHN0eWxlPSJib3JkZXItcmFkaXVzOjRweDsiKQogICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6Izc4QjYyRTsiKQogICAgICAgICAgICAgIHNwYW4gI1tzdHJvbmcgw4FuZ3VsbyByZWN0byAoOTDCsCk6XSBGcmVjdWVudGUgZW4gZXNxdWluYXMgeSBlc3RydWN0dXJhcyBvcnRvZ29uYWxlcy4KICAgICAgICAgICAgbGkuZC1mbGV4LmJnLXdoaXRlLnAtMihzdHlsZT0iYm9yZGVyLXJhZGl1czo0cHg7IikKICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiM3OEI2MkU7IikKICAgICAgICAgICAgICBzcGFuICNbc3Ryb25nIMOBbmd1bG8gYWd1ZG8gKDwgOTDCsCk6XSBDb23Dum4gZW4gZWwgZGlzZcOxbyBkZSBwaWV6YXMgY29uIGluY2xpbmFjaW9uZXMgZXNwZWPDrWZpY2FzLgogICAgICAgICAgICBsaS5kLWZsZXguYmctd2hpdGUucC0yKHN0eWxlPSJib3JkZXItcmFkaXVzOjRweDsiKQogICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6Izc4QjYyRTsiKQogICAgICAgICAgICAgIHNwYW4gI1tzdHJvbmcgw4FuZ3VsbyBvYnR1c28gKD4gOTDCsCB5IDwgMTgwwrApOl0gQXBsaWNhZG8gZW4gZGlzZcOxb3MgcXVlIHJlcXVpZXJlbiBhcGVydHVyYSBhbXBsaWEuCiAgICAgICAgICAgIGxpLmQtZmxleC5iZy13aGl0ZS5wLTIubWItMChzdHlsZT0iYm9yZGVyLXJhZGl1czo0cHg7IikKICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiM3OEI2MkU7IikKICAgICAgICAgICAgICBzcGFuICNbc3Ryb25nIMOBbmd1bG8gbGxhbm8gKDE4MMKwKTpdIFJlcHJlc2VudGEgdW5hIGzDrW5lYSByZWN0YS4KICAgICAgLmNvbC1sZy1hdXRvLmQtbm9uZS5kLWxnLWJsb2NrKGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTMvMTIucG5nIikKICAgIAogICAgcC5tdC00KGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikgTG9zIMOhbmd1bG9zIHBlcm1pdGVuIGVzcGVjaWZpY2FyIGluY2xpbmFjaW9uZXMgeSBvcmllbnRhY2lvbmVzIGRlIGxhcyBkaWZlcmVudGVzIHBhcnRlcyBkZSB1biBvYmpldG8uIFNlIHVzYW4gcGFyYSBjb25zdHJ1aXIgZmlndXJhcyBnZW9tw6l0cmljYXMsIGRldGVybWluYXIgbGEgc2ltZXRyw61hIGRlIHVuIGRpc2XDsW8geSBkZWZpbmlyIGxhIG9yaWVudGFjacOzbiBkZSBsYXMgcGllemFzIGVuIHBsYW5vcy4KCiAgICAuY29udF9kZWNvcmF0aXZvLm1iLTQubXQtNShkYXRhLWFvcz0iZmFkZS1yaWdodCIpCiAgICAgIC5yb3cKICAgICAgICAuY29sLWF1dG8ucGUtMAogICAgICAgICAgZmlndXJlCiAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzMuc3ZnIikKICAgICAgICAuY29sLnBzLTIoc3R5bGU9InBsYWNlLXNlbGY6Y2VudGVyOyIpCiAgICAgICAgICBoMy5tYi0wLnBlLTQgRmlndXJhcyBnZW9tw6l0cmljYXMgeSB0cmF6YWRvIGRlIGZpZ3VyYXMgY29tcGxlamFzCiAgICAKICAgIC5yb3cKICAgICAgLmNvbC1sZyhkYXRhLWFvcz0iZmFkZS1yaWdodCIpCiAgICAgICAgcCBFbiBlbCBkaWJ1am8gdMOpY25pY28sIGxhcyBmaWd1cmFzIGdlb23DqXRyaWNhcyBzaW1wbGVzIHkgY29tcGxlamFzIHBlcm1pdGVuIHJlcHJlc2VudGFyIHBpZXphcyB5IGNvbXBvbmVudGVzIGRlIG1hbmVyYSBwcmVjaXNhIHkgZXN0YW5kYXJpemFkYS4gTGEgaGFiaWxpZGFkIGRlIHRyYXphciBlc3RhcyBmaWd1cmFzIGNvbiBleGFjdGl0dWQgZXMgZnVuZGFtZW50YWwsIHlhIHF1ZSBtdWNoYXMgcGllemFzIHkgZXN0cnVjdHVyYXMgZXN0w6FuIGNvbXB1ZXN0YXMgZGUgY29tYmluYWNpb25lcyBkZSBlc3RhcyBmb3JtYXMgYsOhc2ljYXMuCiAgICAgICAgLnAtNChzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjojOThFMkVDO2JvcmRlci1yYWRpdXM6MTBweDsiKQogICAgICAgICAgcC5tYi0wIExhcyBmaWd1cmFzIGdlb23DqXRyaWNhcyBlbiBkaWJ1am8gdMOpY25pY28gc2UgZGl2aWRlbiBlbiBkb3MgY2F0ZWdvcsOtYXMgcHJpbmNpcGFsZXM6IHNpbXBsZXMgeSBjb21wbGVqYXMuIExhcyBmaWd1cmFzIHNpbXBsZXMgaW5jbHV5ZW4gZm9ybWFzIGLDoXNpY2FzIGNvbW8gZWwgY3VhZHJhZG8sIHJlY3TDoW5ndWxvLCB0cmnDoW5ndWxvIHkgY8OtcmN1bG8sIHF1ZSBzb24gZnVuZGFtZW50YWxlcyBwYXJhIGxhIGNvbnN0cnVjY2nDs24gZGUgZGlzZcOxb3MgbcOhcyBlbGFib3JhZG9zLiBQb3Igb3RyYSBwYXJ0ZSwgbGFzIGZpZ3VyYXMgY29tcGxlamFzIGFiYXJjYW4gaGV4w6Fnb25vcywgcG9sw61nb25vcyBpcnJlZ3VsYXJlcywgYXJjb3MgeSBlbGlwc2VzLCBxdWUgcmVxdWllcmVuIHTDqWNuaWNhcyBtw6FzIGF2YW56YWRhcyBkZSB0cmF6YWRvIHkgc2UgdXRpbGl6YW4gcGFyYSByZXByZXNlbnRhciBlbGVtZW50b3MgbcOhcyBzb2Zpc3RpY2Fkb3MgZW4gbG9zIHBsYW5vcyB0w6ljbmljb3MuCiAgICAgIC5jb2wtbGctYXV0by5kLW5vbmUuZC1sZy1ibG9jayhkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzLzEzLnBuZyIpCgogICAgU2VwYXJhZG9yCgogICAgLnRpdHVsby1zZWd1bmRvKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgaDIjdF8zXzQgMy40CVRpcG9zIGRlIHZpc3RhcyB5IHByb3llY2Npb25lcwogICAgCiAgICBwKGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikgRW4gZWwgZGlidWpvIHTDqWNuaWNvLCBsYXMgdmlzdGFzIHkgcHJveWVjY2lvbmVzIHNvbiBtw6l0b2RvcyBkZSByZXByZXNlbnRhY2nDs24gcXVlIHBlcm1pdGVuIHZpc3VhbGl6YXIgdW4gb2JqZXRvIGVuIGRpc3RpbnRhcyBwb3NpY2lvbmVzIHBhcmEgY29tdW5pY2FyIHN1cyBkaW1lbnNpb25lcywgZm9ybWFzIHkgY2FyYWN0ZXLDrXN0aWNhcyBjb24gZXhhY3RpdHVkLiBFc3RlIGFwYXJ0YWRvIG9mcmVjZSB1bmEgZXhwbGljYWNpw7NuIGRldGFsbGFkYSBkZSBsYXMgdmlzdGFzIG9ydG9nb25hbGVzLCBsYXMgdmlzdGFzIGlzb23DqXRyaWNhcyB5IGVuIHBlcnNwZWN0aXZhLCBhc8OtIGNvbW8gZWplcmNpY2lvcyBwYXJhIGludGVycHJldGFyIGVzdG9zIGNvbmNlcHRvcyBlbiBwbGFub3MgaW5kdXN0cmlhbGVzLgoKICAgIC5jb250X2RlY29yYXRpdm8ubWItNC5tdC01KGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikKICAgICAgLnJvdwogICAgICAgIC5jb2wtYXV0by5wZS0wCiAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvMy5zdmciKQogICAgICAgIC5jb2wucHMtMihzdHlsZT0icGxhY2Utc2VsZjpjZW50ZXI7IikKICAgICAgICAgIGgzLm1iLTAucGUtNCBWaXN0YSBvcnRvZ29uYWwKICAgIAogICAgLnJvdwogICAgICAuY29sLWxnKGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikKICAgICAgICBwIEVzIHVuYSB0w6ljbmljYSBkZSBkaWJ1am8gdMOpY25pY28gcXVlIHJlcHJlc2VudGEgdW4gb2JqZXRvIGVuIGRpZmVyZW50ZXMgdmlzdGFzIChub3JtYWxtZW50ZSBmcm9udGFsLCBsYXRlcmFsIHkgc3VwZXJpb3IpIHBhcmEgbW9zdHJhciBzdXMgZGltZW5zaW9uZXMgeSBkZXRhbGxlcyBkZSBtYW5lcmEgcHJlY2lzYS4gQSBkaWZlcmVuY2lhIGRlIG90cmFzIHByb3llY2Npb25lcywgbGEgb3J0b2dvbmFsIG1hbnRpZW5lIGxhcyBwcm9wb3JjaW9uZXMgZXhhY3RhcyB5IGxhIG9yaWVudGFjacOzbiByZWFsIGRlbCBvYmpldG8sIHNpbiBwZXJzcGVjdGl2YSBuaSBkaXN0b3JzacOzbi4KICAgICAgICBwIERlc2NyaXBjacOzbiBkZSBsYXMgVmlzdGFzIE9ydG9nb25hbGVzOgogICAgICAgIC5wLTQoc3R5bGU9ImJhY2tncm91bmQtY29sb3I6I0U0RjdGQTtib3JkZXItcmFkaXVzOjEwcHg7IikKICAgICAgICAgIHVsLmxpc3RhLXVsLm1iLTAKICAgICAgICAgICAgbGkuZC1mbGV4Lm1iLTMKICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiM3OEI2MkU7IikKICAgICAgICAgICAgICBzcGFuICNbU3Ryb25nIFZpc3RhIEZyb250YWw6XSBNdWVzdHJhIGxhIGNhcmEgcHJpbmNpcGFsIGRlbCBvYmpldG8uIEVzdGEgdmlzdGEgc2UgZWxpZ2UgcGFyYSBwcmVzZW50YXIgbGEgbWF5b3IgY2FudGlkYWQgZGUgZGV0YWxsZXMgcG9zaWJsZXMgeSBzZSBjb25zaWRlcmEgbGEgdmlzdGEg4oCcYmFzZeKAnS4KICAgICAgICAgICAgbGkuZC1mbGV4Lm1iLTMKICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiM3OEI2MkU7IikKICAgICAgICAgICAgICBzcGFuICNbU3Ryb25nIFZpc3RhIExhdGVyYWw6XSBSZXByZXNlbnRhIHVubyBkZSBsb3MgbGFkb3MgZGVsIG9iamV0byAoZ2VuZXJhbG1lbnRlIGVsIGRlcmVjaG8pIHkgcGVybWl0ZSB2ZXIgc3UgcHJvZnVuZGlkYWQgeSBhbHR1cmEuCiAgICAgICAgICAgIGxpLmQtZmxleC5tYi0wCiAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlKHN0eWxlPSJjb2xvcjojNzhCNjJFOyIpCiAgICAgICAgICAgICAgc3BhbiAjW1N0cm9uZyBWaXN0YSBTdXBlcmlvcjpdIE11ZXN0cmEgZWwgb2JqZXRvIGRlc2RlIGFycmliYSwgYnJpbmRhbmRvIHVuYSBwZXJzcGVjdGl2YSBkZSBzdSBhbmNobyB5IHByb2Z1bmRpZGFkLgogICAgICAuY29sLWxnLWF1dG8uZC1ub25lLmQtbGctYmxvY2soZGF0YS1hb3M9ImZhZGUtbGVmdCIpCiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMy8xNC5wbmciKQogICAgCiAgICAucm93Lm10LTQKICAgICAgLmNvbC1sZy1hdXRvLmQtbm9uZS5kLWxnLWJsb2NrKGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzLzE1LnBuZyIpCiAgICAgIC5jb2wtbGcoZGF0YS1hb3M9ImZhZGUtbGVmdCIpCiAgICAgICAgcCBBcGxpY2FjacOzbiBkZSBsYXMgVmlzdGFzIE9ydG9nb25hbGVzIGVuIGVsIERpYnVqbyBUw6ljbmljbzoKICAgICAgICAucC00KHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiNFM0YwRDQ7Ym9yZGVyLXJhZGl1czoxMHB4OyIpCiAgICAgICAgICBwIExhIHByb3llY2Npw7NuIG9ydG9nb25hbCBwZXJtaXRlIGRlc2dsb3NhciB1biBvYmpldG8gdHJpZGltZW5zaW9uYWwgZW4gdmFyaWFzIHZpc3RhcyBiaWRpbWVuc2lvbmFsZXMsIGFzZWd1cmFuZG8gcXVlIGNhZGEgZGltZW5zacOzbiBkZWwgb2JqZXRvIHNlIG11ZXN0cmUgc2luIGRpc3RvcnNpw7NuLgogICAgICAgICAgcC5tYi0wICNbc3Ryb25nIEVqZW1wbG86XSBFbiBlbCBkaXNlw7FvIGRlIHVuYSBwaWV6YSBtZWPDoW5pY2EsIGxhIHZpc3RhIGZyb250YWwgcHVlZGUgbW9zdHJhciBzdSBmb3JtYSBnZW5lcmFsIHkgcGVyZm9yYWNpb25lcywgbGEgdmlzdGEgbGF0ZXJhbCBwdWVkZSBtb3N0cmFyIHN1IHByb2Z1bmRpZGFkIHkgZWwgZXNwZXNvciBkZWwgbWF0ZXJpYWwsIHkgbGEgdmlzdGEgc3VwZXJpb3IgcGVybWl0ZSB2ZXIgc3UgbG9uZ2l0dWQgeSB1YmljYWNpw7NuIGRlIG90cmFzIGNhcmFjdGVyw61zdGljYXMuCiAgICAKICAgIC5yb3cubXQtNQogICAgICAuY29sLWxnKGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikKICAgICAgICBwIFBhc29zIHBhcmEgQ3JlYXIgVmlzdGFzIE9ydG9nb25hbGVzOgogICAgICAgIC5wLTQoc3R5bGU9ImJhY2tncm91bmQtY29sb3I6I0VBRUZGNDtib3JkZXItcmFkaXVzOjEwcHg7IikKICAgICAgICAgIG9sLmxpc3RhLW9sLS1jdWFkcm8ubWItMAogICAgICAgICAgICBsaS5kLWZsZXgubWItMwogICAgICAgICAgICAgIC5saXN0YS1vbC0tY3VhZHJvX192aW5ldGEoc3R5bGU9ImJhY2tncm91bmQtY29sb3I6Izc4QjYyRTsiKQogICAgICAgICAgICAgICAgc3Bhbi5mdy1ib2xkKHN0eWxlPSJjb2xvcjojMTIyNjNGOyIpIGEKICAgICAgICAgICAgICBzcGFuICNbc3Ryb25nIFNlbGVjY2lvbmFyIGxhIHZpc3RhIHByaW5jaXBhbCAoZnJvbnRhbCksXSBxdWUgb2ZyZWNlIGxhIG1heW9yIGNhbnRpZGFkIGRlIGluZm9ybWFjacOzbiBzb2JyZSBlbCBvYmpldG8uCiAgICAgICAgICAgIGxpLmQtZmxleC5tYi0zCiAgICAgICAgICAgICAgLmxpc3RhLW9sLS1jdWFkcm9fX3ZpbmV0YShzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjojNzhCNjJFOyIpCiAgICAgICAgICAgICAgICBzcGFuLmZ3LWJvbGQoc3R5bGU9ImNvbG9yOiMxMjI2M0Y7IikgYgogICAgICAgICAgICAgIHNwYW4gI1tzdHJvbmcgRGlidWphciBsYXMgdmlzdGFzIHJlc3RhbnRlcyAobGF0ZXJhbCB5IHN1cGVyaW9yKV0gZW4gY29ycmVzcG9uZGVuY2lhIGNvbiBsYSB2aXN0YSBmcm9udGFsLCByZXNwZXRhbmRvIGxhcyBhbGluZWFjaW9uZXMgeSBwcm9wb3JjaW9uZXMuCiAgICAgICAgICAgIGxpLmQtZmxleC5tYi0wCiAgICAgICAgICAgICAgLmxpc3RhLW9sLS1jdWFkcm9fX3ZpbmV0YShzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjojNzhCNjJFOyIpCiAgICAgICAgICAgICAgICBzcGFuLmZ3LWJvbGQoc3R5bGU9ImNvbG9yOiMxMjI2M0Y7IikgYwogICAgICAgICAgICAgIHNwYW4gI1tzdHJvbmcgTWFudGVuZXIgY29uc2lzdGVuY2lhIGVuIGxhcyBsw61uZWFzIHkgZGV0YWxsZXNdIHBhcmEgcXVlIGNhZGEgdmlzdGEgcmVmbGVqZSBsYXMgY2FyYWN0ZXLDrXN0aWNhcyBleGFjdGFzIGRlbCBvYmpldG8uCiAgICAgIC5jb2wtbGctYXV0by5kLW5vbmUuZC1sZy1ibG9jayhkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzLzE2LnBuZyIpCiAgICAKICAgIC5jb250X2RlY29yYXRpdm8ubWItNC5tdC01KGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikKICAgICAgLnJvdwogICAgICAgIC5jb2wtYXV0by5wZS0wCiAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvMy5zdmciKQogICAgICAgIC5jb2wucHMtMihzdHlsZT0icGxhY2Utc2VsZjpjZW50ZXI7IikKICAgICAgICAgIGgzLm1iLTAucGUtNCAgVmlzdGFzIGlzb23DqXRyaWNhcyB5IHBlcnNwZWN0aXZhCiAgICAKICAgIHAoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKSBTb24gbcOpdG9kb3MgZGUgcmVwcmVzZW50YWNpw7NuIHRyaWRpbWVuc2lvbmFsZXMgcXVlIHBlcm1pdGVuIG9ic2VydmFyIHVuIG9iamV0byBlbiBzdSBmb3JtYSBjb21wbGV0YSwgZmFjaWxpdGFuZG8gbGEgaW50ZXJwcmV0YWNpw7NuIGRlIHN1IHZvbHVtZW4sIHByb3BvcmNpb25lcyB5IHViaWNhY2nDs24gZGUgc3VzIHBhcnRlcy4KCiAgICAuY29udF8xXzEubXQtNS5wdC00LnBiLTQucGIteGwtNS5wdC14bC01CiAgICAgIC50YXJqZXRhLmJnLXdoaXRlLnAtNC5wLWxnLTUucGItbGctNAogICAgICAgIENhcm91c2VsUkVEKHRpcG89ImIiKQogICAgICAgICAgLnJvdy5wdC1sZy00LmNvbC14bC0xMS5tLWF1dG8KICAgICAgICAgICAgLmNvbC1sZy03Lm1iLTQubWItbGctMChzdHlsZT0icGxhY2Utc2VsZjpjZW50ZXI7IikKICAgICAgICAgICAgICBwLmZ3LWJvbGQgVmlzdGEgSXNvbcOpdHJpY2EKICAgICAgICAgICAgICBwIExhIHZpc3RhIGlzb23DqXRyaWNhIHByZXNlbnRhIGVsIG9iamV0byBlbiB1biDDoW5ndWxvIGRlIDMwwrAgcmVzcGVjdG8gYSBjYWRhIGVqZSBwcmluY2lwYWwgKHgsIHksIHopLCBsbyBxdWUgcGVybWl0ZSB2ZXIgdHJlcyBjYXJhcyBkZWwgb2JqZXRvIGFsIG1pc21vIHRpZW1wby4gTWFudGllbmUgbGFzIGRpbWVuc2lvbmVzIHJlYWxlcyBzaW4gZGlzdG9yc2nDs24gZGUgZXNjYWxhLCBwb3IgbG8gcXVlIGxhcyBwcm9wb3JjaW9uZXMgc2UgbWFudGllbmVuIGNvbnN0YW50ZXMuCiAgICAgICAgICAgICAgcCBTZSB1dGlsaXphIHBhcmEgbW9zdHJhciBvYmpldG9zIGNvbiBjbGFyaWRhZCBlbiBzdSB2b2x1bWVuIHkgZXN0cnVjdHVyYSBzaW4gbGEgZGlzdG9yc2nDs24gcXVlIG9jdXJyZSBlbiB1bmEgcGVyc3BlY3RpdmEuIEVzIGNvbcO6biBlbiBwbGFub3MgZGUgZW5zYW1ibGFqZSB5IGRpc2XDsW8gZGUgcGllemFzLCBkb25kZSBzZSBuZWNlc2l0YSB1bmEgcmVwcmVzZW50YWNpw7NuIGNsYXJhIHkgcHJvcG9yY2lvbmFsIGRlbCBvYmpldG8uCiAgICAgICAgICAgIC5jb2wtbGctNQogICAgICAgICAgICAgIGZpZ3VyZS5tLWF1dG8uY29sLTEyLmNvbC1tZC04LmNvbC1sZy0xMgogICAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTMvMTcucG5nJykKICAgICAgICAgIC5yb3cucHQtbGctNC5jb2wteGwtMTEubS1hdXRvCiAgICAgICAgICAgIC5jb2wtbGctNy5tYi00Lm1iLWxnLTAoc3R5bGU9InBsYWNlLXNlbGY6Y2VudGVyOyIpCiAgICAgICAgICAgICAgcC5mdy1ib2xkIFZpc3RhIGVuIHBlcnNwZWN0aXZhCiAgICAgICAgICAgICAgcCBFc3RhIHNpbXVsYSBjw7NtbyBlbCBvam8gaHVtYW5vIHBlcmNpYmUgdW4gb2JqZXRvIGVuIHRyZXMgZGltZW5zaW9uZXMsIG1vc3RyYW5kbyBsYXMgcGFydGVzIG3DoXMgY2VyY2FuYXMgYWwgb2JzZXJ2YWRvciBtw6FzIGdyYW5kZXMgeSBsYXMgbcOhcyBsZWphbmFzIG3DoXMgcGVxdWXDsWFzLiAgTGEgdmlzdGEgZW4gcGVyc3BlY3RpdmEgb2ZyZWNlIHVuYSBhcGFyaWVuY2lhIHJlYWxpc3RhLCB5YSBxdWUgbGFzIGzDrW5lYXMgY29udmVyZ2VuIGVuIHVuIHB1bnRvIGRlIGZ1Z2EgZW4gZWwgaG9yaXpvbnRlLCBjcmVhbmRvIHByb2Z1bmRpZGFkLgogICAgICAgICAgICAgIHAgU2UgdXRpbGl6YSBlbiBwcmVzZW50YWNpb25lcywgaWx1c3RyYWNpb25lcyB5IGRvY3VtZW50b3MgZG9uZGUgc2UgYnVzY2EgbW9zdHJhciB1bmEgaW1hZ2VuIHZpc3VhbG1lbnRlIGF0cmFjdGl2YSBkZWwgb2JqZXRvLiBFcyBtZW5vcyBjb23Dum4gZW4gZGlidWpvcyB0w6ljbmljb3MgZGV0YWxsYWRvcyBkZWJpZG8gYSBsYSBkaXN0b3JzacOzbiBkZSBsYXMgZGltZW5zaW9uZXMuCiAgICAgICAgICAgIC5jb2wtbGctNQogICAgICAgICAgICAgIGZpZ3VyZS5tLWF1dG8uY29sLTEyLmNvbC1tZC04LmNvbC1sZy0xMgogICAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTMvMTgucG5nJykKICAgIAogICAgcC5tdC01KGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikgU2UgdXRpbGl6YSBlbiBwcmVzZW50YWNpb25lcywgaWx1c3RyYWNpb25lcyB5IGRvY3VtZW50b3MgZG9uZGUgc2UgYnVzY2EgbW9zdHJhciB1bmEgaW1hZ2VuIHZpc3VhbG1lbnRlIGF0cmFjdGl2YSBkZWwgb2JqZXRvLiBFcyBtZW5vcyBjb23Dum4gZW4gZGlidWpvcyB0w6ljbmljb3MgZGV0YWxsYWRvcyBkZWJpZG8gYSBsYSBkaXN0b3JzacOzbiBkZSBsYXMgZGltZW5zaW9uZXMuCgogICAgLmNvbnRfZGVjb3JhdGl2by5tYi00Lm10LTUoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKQogICAgICAucm93CiAgICAgICAgLmNvbC1hdXRvLnBlLTAKICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS8zLnN2ZyIpCiAgICAgICAgLmNvbC5wcy0yKHN0eWxlPSJwbGFjZS1zZWxmOmNlbnRlcjsiKQogICAgICAgICAgaDMubWItMC5wZS00IEludGVycHJldGFjacOzbiBkZSB2aXN0YXMgZW4gcGxhbm9zIGluZHVzdHJpYWxlcwogICAgCiAgICBwKGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikgTGEgaGFiaWxpZGFkIGRlIGludGVycHJldGFyIGxhcyBkaWZlcmVudGVzIHZpc3RhcyBkZSB1biBwbGFubyB0w6ljbmljbyBlcyBlc2VuY2lhbCBlbiBjdWFscXVpZXIgZW50b3JubyBpbmR1c3RyaWFsLiBMb3MgcGxhbm9zIGluZHVzdHJpYWxlcyBjb21iaW5hbiB2aXN0YXMgb3J0b2dvbmFsZXMsIGlzb23DqXRyaWNhcyB5IGVuIGFsZ3Vub3MgY2Fzb3MsIHBlcnNwZWN0aXZhcywgcGFyYSBwcm9wb3JjaW9uYXIgdW5hIGNvbXByZW5zacOzbiBjb21wbGV0YSBkZSB1biBkaXNlw7FvLiBTZSByZWNvbWllbmRhLCBsbGV2YXIgYSBjYWJvIGxvcyBzaWd1aWVudGVzIGVqZXJjaWNpb3MuCgogICAgLnJvdy5tdC00CiAgICAgIC5jb2wtbGcoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKQogICAgICAgIEFjb3JkaW9uUkVEKHRpcG89ImEiIGNsYXNlLXRhcmpldGE9InRhcmpldGEiKQogICAgICAgICAgLnJvdy5jb2wteGwtMTEubS1hdXRvKHRpdHVsbz0iRWplcmNpY2lvIDE6IGlkZW50aWZpY2FjacOzbiBkZSB2aXN0YXMgZW4gdW4gcGxhbm8gc2ltcGxlIikKICAgICAgICAgICAgcCBEYWRvIHVuIHBsYW5vIHTDqWNuaWNvIGRlIHVuYSBwaWV6YSBzaW1wbGUgKHBvciBlamVtcGxvLCB1biBjdWJvIGNvbiBwZXJmb3JhY2lvbmVzKSwgaWRlbnRpZmljYXIgeSBub21icmFyIGNhZGEgdW5hIGRlIGxhcyB2aXN0YXMgKGZyb250YWwsIGxhdGVyYWwsIHkgc3VwZXJpb3IpLgogICAgICAgICAgLnJvdy5jb2wteGwtMTEubS1hdXRvKHRpdHVsbz0iRWplcmNpY2lvIDI6IGludGVycHJldGFjacOzbiBkZSB1bmEgdmlzdGEgaXNvbcOpdHJpY2EgeSBzdXMgdmlzdGFzIG9ydG9nb25hbGVzIikKICAgICAgICAgICAgcCBEYWRvIHVuIHBsYW5vIGNvbiB1bmEgdmlzdGEgaXNvbcOpdHJpY2EgZGUgdW5hIHBpZXphIHkgc3VzIHZpc3RhcyBvcnRvZ29uYWxlcywgYW5hbGl6YXIgY8OzbW8gY2FkYSB2aXN0YSBvcnRvZ29uYWwgY29ycmVzcG9uZGUgYSBsYXMgZGlmZXJlbnRlcyBjYXJhcyBkZSBsYSB2aXN0YSBpc29tw6l0cmljYS4KICAgICAgICAgIC5yb3cuY29sLXhsLTExLm0tYXV0byh0aXR1bG89IkVqZXJjaWNpbyAzOiBjcmVhY2nDs24gZGUgdW4gcGxhbm8gY29uIHZpc3RhcyBvcnRvZ29uYWxlcyB5IGlzb23DqXRyaWNhIikKICAgICAgICAgICAgcCBBIHBhcnRpciBkZSB1biBtb2RlbG8gZGUgdW5hIHBpZXphIHNlbmNpbGxhIChjb21vIHVuIGNpbGluZHJvIGNvbiB1biBjb3J0ZSksIHJlYWxpemFyIHVuIGRpYnVqbyB0w6ljbmljbyBxdWUgaW5jbHV5YSBsYXMgdHJlcyB2aXN0YXMgb3J0b2dvbmFsZXMgeSB1bmEgdmlzdGEgaXNvbcOpdHJpY2EuCiAgICAgICAgICAucm93LmNvbC14bC0xMS5tLWF1dG8odGl0dWxvPSJFamVyY2ljaW8gNDogYW7DoWxpc2lzIGRlIHBsYW5vcyBpbmR1c3RyaWFsZXMgY29tcGxlam9zIikKICAgICAgICAgICAgcCBUb21hciB1biBwbGFubyBpbmR1c3RyaWFsIHF1ZSBjb21iaW5lIG3Dumx0aXBsZXMgdmlzdGFzIG9ydG9nb25hbGVzIHkgYWwgbWVub3MgdW5hIHZpc3RhIGlzb23DqXRyaWNhLCB5IGFuYWxpemFyIGPDs21vIHNlIHJlcHJlc2VudGFuIGxhcyBwYXJ0ZXMgb2N1bHRhcywgZGltZW5zaW9uZXMgeSBkZXRhbGxlcy4KICAgICAgLmNvbC1sZy1hdXRvLmQtbm9uZS5kLWxnLWJsb2NrKGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTMvMTkucG5nIikKCiAgICBTZXBhcmFkb3IKCiAgICAudGl0dWxvLXNlZ3VuZG8oZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICBoMiN0XzNfNSAzLjUJSW50ZXJwcmV0YWNpw7NuIGRlIGZvcm1hcywgYWNvdGFkbyB5IGxlY3R1cmEgZGUgcGxhbm9zCiAgICAKICAgIC5jb250X2RlY29yYXRpdm8ubWItNC5tdC01KGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikKICAgICAgLnJvdwogICAgICAgIC5jb2wtYXV0by5wZS0wCiAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvMy5zdmciKQogICAgICAgIC5jb2wucHMtMihzdHlsZT0icGxhY2Utc2VsZjpjZW50ZXI7IikKICAgICAgICAgIGgzLm1iLTAucGUtNCBJbnRlcnByZXRhY2nDs24gZGUgZm9ybWFzCiAgICAKICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIENvbnNpc3RlIGVuIGlkZW50aWZpY2FyIHkgYW5hbGl6YXIgbGEgZXN0cnVjdHVyYSBnZW9tw6l0cmljYSBkZSBsb3Mgb2JqZXRvcyByZXByZXNlbnRhZG9zIGVuIHVuIHBsYW5vIHTDqWNuaWNvLiBFc3RlIHByb2Nlc28gcGVybWl0ZSBjb21wcmVuZGVyIGPDs21vIHNlIHJlcHJlc2VudGFuIGxhcyBkaW1lbnNpb25lcyB5IGNhcmFjdGVyw61zdGljYXMgdHJpZGltZW5zaW9uYWxlcyBkZSB1biBvYmpldG8gZW4gdW4gZXNwYWNpbyBiaWRpbWVuc2lvbmFsLiBFbiBkaWJ1am8gdMOpY25pY28sIGludGVycHJldGFyIGNvcnJlY3RhbWVudGUgbGFzIGZvcm1hcyBlcyBjbGF2ZSBwYXJhIHZpc3VhbGl6YXIgbGEgcmVsYWNpw7NuIGVudHJlIGxhcyBwYXJ0ZXMgeSBsb3MgZGV0YWxsZXMgZGUgdW4gZGlzZcOxby4KCiAgICAucm93Lm10LTQKICAgICAgLmNvbC1sZy1hdXRvLmQtbm9uZS5kLWxnLWJsb2NrKGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzLzIwLnBuZyIpCiAgICAgIC5jb2wtbGcoZGF0YS1hb3M9ImZhZGUtbGVmdCIpCiAgICAgICAgcCBFbGVtZW50b3MgQsOhc2ljb3MgZGUgbGEgSW50ZXJwcmV0YWNpw7NuIGRlIEZvcm1hczoKICAgICAgICBBY29yZGlvblJFRCh0aXBvPSJhIiBjbGFzZS10YXJqZXRhPSJ0YXJqZXRhIikKICAgICAgICAgIC5yb3cuY29sLXhsLTExLm0tYXV0byh0aXR1bG89IlZpc3RhcyIpCiAgICAgICAgICAgIHAgSWRlbnRpZmljYXIgeSByZWxhY2lvbmFyIGxhcyBkaWZlcmVudGVzIHZpc3RhcyAoZnJvbnRhbCwgbGF0ZXJhbCB5IHN1cGVyaW9yKSBwYXJhIG9idGVuZXIgdW5hIGNvbXByZW5zacOzbiBjb21wbGV0YSBkZSBsYSBmb3JtYS4KICAgICAgICAgIC5yb3cuY29sLXhsLTExLm0tYXV0byh0aXR1bG89IkzDrW5lYXMgeSBDb250b3Jub3MiKQogICAgICAgICAgICBwIFJlY29ub2NlciBsYXMgbMOtbmVhcyBkZSBjb250b3JubyAoZXh0ZXJpb3JlcyksIGxhcyBsw61uZWFzIG9jdWx0YXMgeSBsYXMgbMOtbmVhcyBkZSBjZW50cm8gcGFyYSBpbnRlcnByZXRhciBlbCB2b2x1bWVuIHkgZGlzcG9zaWNpw7NuIGRlIGxhcyBwYXJ0ZXMgZGUgdW4gb2JqZXRvLgogICAgICAgICAgLnJvdy5jb2wteGwtMTEubS1hdXRvKHRpdHVsbz0iUHJvcG9yY2lvbmVzIHkgRXNjYWxhcyIpCiAgICAgICAgICAgIHAgT2JzZXJ2YXIgbGFzIHByb3BvcmNpb25lcyBlbnRyZSBsYXMgZGlzdGludGFzIHBhcnRlcyBkZWwgb2JqZXRvIHkgc3UgcmVwcmVzZW50YWNpw7NuIGEgZXNjYWxhIHBhcmEgdGVuZXIgdW5hIGlkZWEgcHJlY2lzYSBkZWwgdGFtYcOxbyB5IGZvcm1hIGVuIGVsIGNvbnRleHRvIGRlbCBkaXNlw7FvLgoKICAgIC5jb250X2RlY29yYXRpdm8ubWItNC5tdC01KGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikKICAgICAgLnJvdwogICAgICAgIC5jb2wtYXV0by5wZS0wCiAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvMy5zdmciKQogICAgICAgIC5jb2wucHMtMihzdHlsZT0icGxhY2Utc2VsZjpjZW50ZXI7IikKICAgICAgICAgIGgzLm1iLTAucGUtNCBBY290YWRvCiAgICAKICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIEVzIGVsIHByb2Nlc28gZGUgYcOxYWRpciBtZWRpZGFzIHkgYW5vdGFjaW9uZXMgZW4gdW4gZGlidWpvIHTDqWNuaWNvIHBhcmEgZXNwZWNpZmljYXIgbGFzIGRpbWVuc2lvbmVzIHkgZGV0YWxsZXMgZGUgdW4gb2JqZXRvLiBFc3RhIGluZm9ybWFjacOzbiBlcyBlc2VuY2lhbCBwYXJhIHF1ZSBlbCBkaXNlw7FvIHB1ZWRhIHNlciBpbnRlcnByZXRhZG8gY29ycmVjdGFtZW50ZSBlbiB0w6lybWlub3MgZGUgdGFtYcOxbywgdWJpY2FjacOzbiBkZSBjYXJhY3RlcsOtc3RpY2FzIHkgdG9sZXJhbmNpYXMuCgogICAgVGFic0MuY29sb3ItYWNlbnRvLWNvbnRlbmlkby5tdC00CiAgICAgIC5weS0zLnB5LW1kLTQodGl0dWxvPSJFbGVtZW50b3MgY2xhdmUgZGVsIGFjb3RhZG8iKQogICAgICAgIC5yb3cucC00LmNvbC14bC0xMS5tLWF1dG8KICAgICAgICAgIC5jb2wtbGctYXV0by5tYi00Lm1iLWxnLTAuY29sLTEwLmNvbC1tZC04Lm0tYXV0byhzdHlsZT0icGxhY2Utc2VsZjpjZW50ZXI7IikKICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTMvMjEucG5nJykKICAgICAgICAgIC5jb2wtbGcoc3R5bGU9InBsYWNlLXNlbGY6Y2VudGVyOyIpCiAgICAgICAgICAgIGg1IEVsZW1lbnRvcyBjbGF2ZSBkZWwgYWNvdGFkbwogICAgICAgICAgICB1bC5saXN0YS11bC5tYi0wLnBzLTMubXQtNAogICAgICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlKHN0eWxlPSJjb2xvcjojMDFCOUQxOyIpCiAgICAgICAgICAgICAgICBzcGFuIExhcyBkaW1lbnNpb25lcyBkZWJlbiBzZXIgY2xhcmFzLCB5IGNhZGEgbWVkaWRhIHNlIHJlcHJlc2VudGEgc29sbyB1bmEgdmV6IGVuIGVsIHBsYW5vLgogICAgICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlKHN0eWxlPSJjb2xvcjojMDFCOUQxOyIpCiAgICAgICAgICAgICAgICBzcGFuIEV2aXRhciBxdWUgbGFzIGzDrW5lYXMgZGUgY290YSB5IGRlIHJlZmVyZW5jaWEgc2UgY3J1Y2VuIHBhcmEgbWFudGVuZXIgbGEgY2xhcmlkYWQuCiAgICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiMwMUI5RDE7IikKICAgICAgICAgICAgICAgIHNwYW4gQ29sb2NhciBsYXMgbWVkaWRhcyBtw6FzIGltcG9ydGFudGVzIHByaW1lcm8sIHBlcm1pdGllbmRvIHF1ZSBsYXMgbcOhcyBwZXF1ZcOxYXMgeSBzZWN1bmRhcmlhcyBxdWVkZW4gdmlzaWJsZXMgc2luIHNvYnJlY2FyZ2FyIGVsIHBsYW5vLgogICAgICAgICAgICBwLm10LTQubWItMCAjW3N0cm9uZyBTZSByZWNvbWllbmRhOl0gRWplcmNpY2lvIFByw6FjdGljby0gRW4gdW4gZGlidWpvIGNvbiB2aXN0YXMgZGUgdW5hIHBpZXphICh2aXN0YSBmcm9udGFsIHkgbGF0ZXJhbCksIGFncmVnYXIgY290YXMgcGFyYSBlc3BlY2lmaWNhciB0b2RhcyBsYXMgZGltZW5zaW9uZXMgY2xhdmUsIGluY2x1eWVuZG8gbG9uZ2l0dWQsIGFuY2hvIHkgcHJvZnVuZGlkYWQuCiAgICAgIC5weS0zLnB5LW1kLTQodGl0dWxvPSJOb3JtYXMgZGUgQWNvdGFkbyIpCiAgICAgICAgLnJvdy5wLTQuY29sLXhsLTExLm0tYXV0bwogICAgICAgICAgLmNvbC1sZy1hdXRvLm1iLTQubWItbGctMC5jb2wtMTAuY29sLW1kLTgubS1hdXRvKHN0eWxlPSJwbGFjZS1zZWxmOmNlbnRlcjsiKQogICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMy8yMi5wbmcnKQogICAgICAgICAgLmNvbC1sZyhzdHlsZT0icGxhY2Utc2VsZjpjZW50ZXI7IikKICAgICAgICAgICAgaDUgTm9ybWFzIGRlIEFjb3RhZG8KICAgICAgICAgICAgdWwubGlzdGEtdWwubWItMC5wcy0zLm10LTQKICAgICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6IzAxQjlEMTsiKQogICAgICAgICAgICAgICAgc3BhbiAjW3N0cm9uZyBMw61uZWFzIGRlIGNvdGE6XSBsw61uZWFzIHF1ZSBkZWxpbWl0YW4gbGFzIGRpbWVuc2lvbmVzIGRlIGNhZGEgcGFydGUgZGVsIG9iamV0by4gRXN0YXMgbMOtbmVhcyBzdWVsZW4gdGVuZXIgZmxlY2hhcyBlbiBsb3MgZXh0cmVtb3MgeSBlc3TDoW4gYWNvbXBhw7FhZGFzIHBvciBjaWZyYXMgZGUgbWVkaWRhIHF1ZSBpbmRpY2FuIGxhIGxvbmdpdHVkIG8gZGltZW5zacOzbiBlc3BlY8OtZmljYS4KICAgICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6IzAxQjlEMTsiKQogICAgICAgICAgICAgICAgc3BhbiAjW3N0cm9uZyBMw61uZWFzIGRlIHJlZmVyZW5jaWEgbyBwcm95ZWNjacOzbjpdIGVzdGFzIGzDrW5lYXMgc2UgZXh0aWVuZGVuIGRlc2RlIGVsIG9iamV0byBoYXN0YSBsYXMgbMOtbmVhcyBkZSBjb3RhLCBhc2VndXJhbmRvIHF1ZSBsYXMgZGltZW5zaW9uZXMgY29ycmVzcG9uZGFuIGEgbGEgcGFydGUgY29ycmVjdGEgZGVsIG9iamV0by4KICAgICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6IzAxQjlEMTsiKQogICAgICAgICAgICAgICAgc3BhbiAjW3N0cm9uZyBDaWZyYXMgZGUgY290YTpdIGxhcyBtZWRpZGFzIGV4YWN0YXMsIG5vcm1hbG1lbnRlIGVuIG1pbMOtbWV0cm9zLCBxdWUgYXBhcmVjZW4gc29icmUgbGFzIGzDrW5lYXMgZGUgY290YS4gRXN0YXMgY2lmcmFzIHNvbiBwcmVjaXNhcyB5IGRlYmVuIGN1bXBsaXIgY29uIGxhcyBub3JtYXMgZXN0YWJsZWNpZGFzIHBhcmEgZXZpdGFyIGVycm9yZXMgZW4gbGEgZmFicmljYWNpw7NuLgogICAgICAgICAgICAgIGxpLmQtZmxleC5tYi0wCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiMwMUI5RDE7IikKICAgICAgICAgICAgICAgIHNwYW4gI1tzdHJvbmcgVG9sZXJhbmNpYXM6XSBzZSBpbmRpY2FuIGVuIGxhcyBjb3RhcyB5IHJlcHJlc2VudGFuIGVsIG1hcmdlbiBkZSBlcnJvciBwZXJtaXRpZG8gZW4gbGFzIGRpbWVuc2lvbmVzLCBsbyBjdWFsIGVzIGZ1bmRhbWVudGFsIGVuIG1hbnVmYWN0dXJhIHBhcmEgYXNlZ3VyYXIgcXVlIGxhcyBwaWV6YXMgZW5jYWplbiBjb3JyZWN0YW1lbnRlLgoKICAgIC5jb250X2RlY29yYXRpdm8ubWItNC5tdC01KGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikKICAgICAgLnJvdwogICAgICAgIC5jb2wtYXV0by5wZS0wCiAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvMy5zdmciKQogICAgICAgIC5jb2wucHMtMihzdHlsZT0icGxhY2Utc2VsZjpjZW50ZXI7IikKICAgICAgICAgIGgzLm1iLTAucGUtNCAgTGVjdHVyYSBkZSBwbGFub3MKICAgIAogICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgU2UgZW50aWVuZGUgY29tbyBsYSBjYXBhY2lkYWQgZGUgaW50ZXJwcmV0YXIgeSBjb21wcmVuZGVyIGxhIGluZm9ybWFjacOzbiBjb250ZW5pZGEgZW4gdW4gcGxhbm8gdMOpY25pY28uIEVzdG8gaW5jbHV5ZSBpZGVudGlmaWNhciBsYXMgdmlzdGFzLCByZWNvbm9jZXIgbGFzIGNvdGFzIHkgZGltZW5zaW9uZXMsIHkgY29tcHJlbmRlciBsYXMgbm90YXMgbyBlc3BlY2lmaWNhY2lvbmVzIGFkaWNpb25hbGVzLiBMYSBsZWN0dXJhIGRlIHBsYW5vcyBlcyB1bmEgaGFiaWxpZGFkIGVzZW5jaWFsIGVuIGVsIGRpYnVqbyB0w6ljbmljbywgeWEgcXVlIHBlcm1pdGUgcXVlIGxvcyBkaXNlw7FhZG9yZXMsIGluZ2VuaWVyb3MgeSB0w6ljbmljb3MgdHJhYmFqZW4gZW4gY29uanVudG8gc29icmUgdW4gbWlzbW8gZGlzZcOxbyBkZSBtYW5lcmEgZWZlY3RpdmEgeSBzaW4gY29uZnVzaW9uZXMuCgogICAgLnJvdy5tdC00CiAgICAgIC5jb2wtbGctYXV0by5kLW5vbmUuZC1sZy1ibG9jayhkYXRhLWFvcz0iZmFkZS1yaWdodCIpCiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMy8yMy5wbmciKQogICAgICAuY29sLWxnKGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgIHAuZnctYm9sZCBDb21wb25lbnRlcyBwcmluY2lwYWxlcyBkZSB1biBwbGFubyB0w6ljbmljbzoKICAgICAgICB1bC5saXN0YS11bC5tYi0wLnBzLTMubXQtMwogICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6Izc4QjYyRTsiKQogICAgICAgICAgICBzcGFuIFZpc3RhcyBvcnRvZ29uYWxlcyBlIGlzb23DqXRyaWNhczogZXN0YXMgdmlzdGFzIHBlcm1pdGVuIHZlciBlbCBvYmpldG8gZW4gZGlmZXJlbnRlcyDDoW5ndWxvcyBwYXJhIG9idGVuZXIgdW5hIHBlcnNwZWN0aXZhIGNvbXBsZXRhIGRlIHN1cyBkaW1lbnNpb25lcyB5IGZvcm1hLgogICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6Izc4QjYyRTsiKQogICAgICAgICAgICBzcGFuIERldGFsbGVzIHkgc2VjY2lvbmVzOiBhbGd1bmFzIHBhcnRlcyBjb21wbGVqYXMgZGVsIG9iamV0byBzZSBtdWVzdHJhbiBlbiBkZXRhbGxlIG8gc2VjY2lvbmFkYXMgcGFyYSBhY2xhcmFyIGxvcyBjb21wb25lbnRlcyBpbnRlcm5vcyBvIGRpZsOtY2lsZXMgZGUgdmlzdWFsaXphci4KICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiM3OEI2MkU7IikKICAgICAgICAgICAgc3BhbiBMZXllbmRhIG8gY3VhZHJvIGRlIGVzcGVjaWZpY2FjaW9uZXM6IGluY2x1eWUgaW5mb3JtYWNpw7NuIGNvbW8gZWwgbm9tYnJlIGRlIGxhIHBpZXphLCBlbCBtYXRlcmlhbCwgbGEgZXNjYWxhIHkgbGFzIHRvbGVyYW5jaWFzIGVzcGVjw61maWNhcy4KICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiM3OEI2MkU7IikKICAgICAgICAgICAgc3BhbiBOb3RhcyB5IGFub3RhY2lvbmVzOiBpbmRpY2FjaW9uZXMgc29icmUgZWwgYWNhYmFkbywgbWF0ZXJpYWxlcyBvIGN1YWxxdWllciBvdHJhIGNhcmFjdGVyw61zdGljYSBhZGljaW9uYWwgcXVlIGVsIHBsYW5vIHTDqWNuaWNvIGRlYmEgY29tdW5pY2FyLgogICAgICAgIGEuYW5leG8ubXQtNC5tYi1sZy0wLm1zLTAoaHJlZj0iaHR0cHM6Ly93d3cubWluZG9tby5jb20vbWluZG1hcC9jNmZiNTUwMmQxMTM0NWFiYjg2NjY0ZjBmMTlkZTY5NSIgdGFyZ2V0PSJfYmxhbmsiIHN0eWxlPSJtYXgtd2lkdGg6Zml0LWNvbnRlbnQ7IikKICAgICAgICAgIC5hbmV4b19faWNvbm8KICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvdGVtcGxhdGUvaWNvbm8tcHB0LnN2ZyIpCiAgICAgICAgICAuYW5leG9fX3RleHRvCiAgICAgICAgICAgIHAuZnctbm9ybWFsICNbc3Ryb25nIEFuZXhvLl0gVGlwb3MgZGUgbMOtbmVhIGVuIGRpYnVqbyB0w6ljbmljby4KICAgICAKCgo="},null]}